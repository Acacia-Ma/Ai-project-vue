{
  "version": 3,
  "sources": ["dep:markdown-it", "../markdown-it/index.mjs", "../markdown-it/lib/index.mjs", "../markdown-it/lib/common/utils.mjs", "../mdurl/index.mjs", "../mdurl/lib/decode.mjs", "../mdurl/lib/encode.mjs", "../mdurl/lib/format.mjs", "../mdurl/lib/parse.mjs", "../uc.micro/index.mjs", "../uc.micro/properties/Any/regex.mjs", "../uc.micro/categories/Cc/regex.mjs", "../uc.micro/categories/Cf/regex.mjs", "../uc.micro/categories/P/regex.mjs", "../uc.micro/categories/Z/regex.mjs", "../entities/lib/esm/index.ts", "../entities/lib/esm/decode.ts", "../entities/lib/esm/generated/generated/decode-data-html.ts", "../entities/lib/esm/generated/generated/decode-data-xml.ts", "../entities/lib/esm/decode_codepoint.ts", "../entities/lib/esm/encode.ts", "../entities/lib/esm/generated/generated/encode-html.ts", "../entities/lib/esm/escape.ts", "../markdown-it/lib/helpers/index.mjs", "../markdown-it/lib/helpers/parse_link_label.mjs", "../markdown-it/lib/helpers/parse_link_destination.mjs", "../markdown-it/lib/helpers/parse_link_title.mjs", "../markdown-it/lib/renderer.mjs", "../markdown-it/lib/parser_core.mjs", "../markdown-it/lib/ruler.mjs", "../markdown-it/lib/rules_core/state_core.mjs", "../markdown-it/lib/token.mjs", "../markdown-it/lib/rules_core/normalize.mjs", "../markdown-it/lib/rules_core/block.mjs", "../markdown-it/lib/rules_core/inline.mjs", "../markdown-it/lib/rules_core/linkify.mjs", "../markdown-it/lib/rules_core/replacements.mjs", "../markdown-it/lib/rules_core/smartquotes.mjs", "../markdown-it/lib/rules_core/text_join.mjs", "../markdown-it/lib/parser_block.mjs", "../markdown-it/lib/rules_block/state_block.mjs", "../markdown-it/lib/rules_block/table.mjs", "../markdown-it/lib/rules_block/code.mjs", "../markdown-it/lib/rules_block/fence.mjs", "../markdown-it/lib/rules_block/blockquote.mjs", "../markdown-it/lib/rules_block/hr.mjs", "../markdown-it/lib/rules_block/list.mjs", "../markdown-it/lib/rules_block/reference.mjs", "../markdown-it/lib/rules_block/html_block.mjs", "../markdown-it/lib/common/html_blocks.mjs", "../markdown-it/lib/common/html_re.mjs", "../markdown-it/lib/rules_block/heading.mjs", "../markdown-it/lib/rules_block/lheading.mjs", "../markdown-it/lib/rules_block/paragraph.mjs", "../markdown-it/lib/parser_inline.mjs", "../markdown-it/lib/rules_inline/state_inline.mjs", "../markdown-it/lib/rules_inline/text.mjs", "../markdown-it/lib/rules_inline/linkify.mjs", "../markdown-it/lib/rules_inline/newline.mjs", "../markdown-it/lib/rules_inline/escape.mjs", "../markdown-it/lib/rules_inline/backticks.mjs", "../markdown-it/lib/rules_inline/strikethrough.mjs", "../markdown-it/lib/rules_inline/emphasis.mjs", "../markdown-it/lib/rules_inline/link.mjs", "../markdown-it/lib/rules_inline/image.mjs", "../markdown-it/lib/rules_inline/autolink.mjs", "../markdown-it/lib/rules_inline/html_inline.mjs", "../markdown-it/lib/rules_inline/entity.mjs", "../markdown-it/lib/rules_inline/balance_pairs.mjs", "../markdown-it/lib/rules_inline/fragments_join.mjs", "../linkify-it/index.mjs", "../linkify-it/lib/re.mjs", "../punycode.js/punycode.es6.js", "../markdown-it/lib/presets/default.mjs", "../markdown-it/lib/presets/zero.mjs", "../markdown-it/lib/presets/commonmark.mjs"],
  "sourcesContent": ["import d from \"./node_modules/markdown-it/index.mjs\";export default d;", "export { default } from './lib/index.mjs'\n", "// Main parser class\n\nimport * as utils from './common/utils.mjs'\nimport * as helpers from './helpers/index.mjs'\nimport Renderer from './renderer.mjs'\nimport ParserCore from './parser_core.mjs'\nimport ParserBlock from './parser_block.mjs'\nimport ParserInline from './parser_inline.mjs'\nimport LinkifyIt from 'linkify-it'\nimport * as mdurl from 'mdurl'\nimport punycode from 'punycode.js'\n\nimport cfg_default from './presets/default.mjs'\nimport cfg_zero from './presets/zero.mjs'\nimport cfg_commonmark from './presets/commonmark.mjs'\n\nconst config = {\n  default: cfg_default,\n  zero: cfg_zero,\n  commonmark: cfg_commonmark\n}\n\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nconst BAD_PROTO_RE = /^(vbscript|javascript|file|data):/\nconst GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/\n\nfunction validateLink (url) {\n  // url should be normalized at this point, and existing entities are decoded\n  const str = url.trim().toLowerCase()\n\n  return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) : true\n}\n\nconst RECODE_HOSTNAME_FOR = ['http:', 'https:', 'mailto:']\n\nfunction normalizeLink (url) {\n  const parsed = mdurl.parse(url, true)\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname)\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed))\n}\n\nfunction normalizeLinkText (url) {\n  const parsed = mdurl.parse(url, true)\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname)\n      } catch (er) { /**/ }\n    }\n  }\n\n  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n  return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + '%')\n}\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `\u201C\u201D\u2018\u2019`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'\u00AB\u00BB\u201E\u201C'` for Russian, `'\u201E\u201C\u201A\u2018'` for German, and\n *   `['\u00AB\\xA0', '\\xA0\u00BB', '\u2039\\xA0', '\\xA0\u203A']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>` or `<code>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre><code class=\"hljs\">' +\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre><code class=\"hljs\">' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt (presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options)\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {}\n      presetName = 'default'\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline()\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock()\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new ParserCore()\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).\n   **/\n  this.renderer = new Renderer()\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt()\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.mjs).\n   **/\n  this.utils = utils\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = utils.assign({}, helpers)\n\n  this.options = {}\n  this.configure(presetName)\n\n  if (options) { this.set(options) }\n}\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options)\n  return this\n}\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you will - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  const self = this\n\n  if (utils.isString(presets)) {\n    const presetName = presets\n    presets = config[presetName]\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name') }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty') }\n\n  if (presets.options) { self.set(presets.options) }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules)\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2)\n      }\n    })\n  }\n  return this\n}\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  let result = []\n\n  if (!Array.isArray(list)) { list = [list] }\n\n  ['core', 'block', 'inline'].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true))\n  }, this)\n\n  result = result.concat(this.inline.ruler2.enable(list, true))\n\n  const missed = list.filter(function (name) { return result.indexOf(name) < 0 })\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed)\n  }\n\n  return this\n}\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  let result = []\n\n  if (!Array.isArray(list)) { list = [list] }\n\n  ['core', 'block', 'inline'].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true))\n  }, this)\n\n  result = result.concat(this.inline.ruler2.disable(list, true))\n\n  const missed = list.filter(function (name) { return result.indexOf(name) < 0 })\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed)\n  }\n  return this\n}\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  const args = [this].concat(Array.prototype.slice.call(arguments, 1))\n  plugin.apply(plugin, args)\n  return this\n}\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and return list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String')\n  }\n\n  const state = new this.core.State(src, this, env)\n\n  this.core.process(state)\n\n  return state.tokens\n}\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {}\n\n  return this.renderer.render(this.parse(src, env), this.options, env)\n}\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  const state = new this.core.State(src, this, env)\n\n  state.inlineMode = true\n  this.core.process(state)\n\n  return state.tokens\n}\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {}\n\n  return this.renderer.render(this.parseInline(src, env), this.options, env)\n}\n\nexport default MarkdownIt\n", "// Utilities\n//\n\nimport * as mdurl from 'mdurl'\nimport * as ucmicro from 'uc.micro'\nimport { decodeHTML } from 'entities'\n\nfunction _class (obj) { return Object.prototype.toString.call(obj) }\n\nfunction isString (obj) { return _class(obj) === '[object String]' }\n\nconst _hasOwnProperty = Object.prototype.hasOwnProperty\n\nfunction has (object, key) {\n  return _hasOwnProperty.call(object, key)\n}\n\n// Merge objects\n//\nfunction assign (obj /* from1, from2, from3, ... */) {\n  const sources = Array.prototype.slice.call(arguments, 1)\n\n  sources.forEach(function (source) {\n    if (!source) { return }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object')\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key]\n    })\n  })\n\n  return obj\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt (src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1))\n}\n\nfunction isValidEntityCode (c) {\n  /* eslint no-bitwise:0 */\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) { return false }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) { return false }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) { return false }\n  if (c === 0x0B) { return false }\n  if (c >= 0x0E && c <= 0x1F) { return false }\n  if (c >= 0x7F && c <= 0x9F) { return false }\n  // out of range\n  if (c > 0x10FFFF) { return false }\n  return true\n}\n\nfunction fromCodePoint (c) {\n  /* eslint no-bitwise:0 */\n  if (c > 0xffff) {\n    c -= 0x10000\n    const surrogate1 = 0xd800 + (c >> 10)\n    const surrogate2 = 0xdc00 + (c & 0x3ff)\n\n    return String.fromCharCode(surrogate1, surrogate2)\n  }\n  return String.fromCharCode(c)\n}\n\nconst UNESCAPE_MD_RE  = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~])/g\nconst ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi\nconst UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi')\n\nconst DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i\n\nfunction replaceEntityPattern (match, name) {\n  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    const code = name[1].toLowerCase() === 'x'\n      ? parseInt(name.slice(2), 16)\n      : parseInt(name.slice(1), 10)\n\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code)\n    }\n\n    return match\n  }\n\n  const decoded = decodeHTML(match)\n  if (decoded !== match) {\n    return decoded\n  }\n\n  return match\n}\n\n/* function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n} */\n\nfunction unescapeMd (str) {\n  if (str.indexOf('\\\\') < 0) { return str }\n  return str.replace(UNESCAPE_MD_RE, '$1')\n}\n\nfunction unescapeAll (str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) { return str }\n\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) { return escaped }\n    return replaceEntityPattern(match, entity)\n  })\n}\n\nconst HTML_ESCAPE_TEST_RE = /[&<>\"]/\nconst HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g\nconst HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n}\n\nfunction replaceUnsafeChar (ch) {\n  return HTML_REPLACEMENTS[ch]\n}\n\nfunction escapeHtml (str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar)\n  }\n  return str\n}\n\nconst REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g\n\nfunction escapeRE (str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&')\n}\n\nfunction isSpace (code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true\n  }\n  return false\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace (code) {\n  if (code >= 0x2000 && code <= 0x200A) { return true }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true\n  }\n  return false\n}\n\n/* eslint-disable max-len */\n\n// Currently without astral characters support.\nfunction isPunctChar (ch) {\n  return ucmicro.P.test(ch)\n}\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct (ch) {\n  switch (ch) {\n    case 0x21/* ! */:\n    case 0x22/* \" */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x27/* ' */:\n    case 0x28/* ( */:\n    case 0x29/* ) */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2C/* , */:\n    case 0x2D/* - */:\n    case 0x2E/* . */:\n    case 0x2F/* / */:\n    case 0x3A/* : */:\n    case 0x3B/* ; */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x3F/* ? */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7C/* | */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true\n    default:\n      return false\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference (str) {\n  // Trim and collapse whitespace\n  //\n  str = str.trim().replace(/\\s+/g, ' ')\n\n  // In node v10 '\u1E9E'.toLowerCase() === '\u1E7E', which is presumed to be a bug\n  // fixed in v12 (couldn't find any details).\n  //\n  // So treat this one as a special case\n  // (remove this when node v10 is no longer supported).\n  //\n  if ('\u1E9E'.toLowerCase() === '\u1E7E') {\n    str = str.replace(/\u1E9E/g, '\u00DF')\n  }\n\n  // .toLowerCase().toUpperCase() should get rid of all differences\n  // between letter variants.\n  //\n  // Simple .toLowerCase() doesn't normalize 125 code points correctly,\n  // and .toUpperCase doesn't normalize 6 of them (list of exceptions:\n  // \u0130, \u03F4, \u1E9E, \u2126, \u212A, \u212B - those are already uppercased, but have differently\n  // uppercased versions).\n  //\n  // Here's an example showing how it happens. Lets take greek letter omega:\n  // uppercase U+0398 (\u0398), U+03f4 (\u03F4) and lowercase U+03b8 (\u03B8), U+03d1 (\u03D1)\n  //\n  // Unicode entries:\n  // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;\n  // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398\n  // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398\n  // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;\n  //\n  // Case-insensitive comparison should treat all of them as equivalent.\n  //\n  // But .toLowerCase() doesn't change \u03D1 (it's already lowercase),\n  // and .toUpperCase() doesn't change \u03F4 (already uppercase).\n  //\n  // Applying first lower then upper case normalizes any character:\n  // '\\u0398\\u03f4\\u03b8\\u03d1'.toLowerCase().toUpperCase() === '\\u0398\\u0398\\u0398\\u0398'\n  //\n  // Note: this is equivalent to unicode case folding; unicode normalization\n  // is a different step that is not required here.\n  //\n  // Final result should be uppercased, because it's later stored in an object\n  // (this avoid a conflict with Object.prototype members,\n  // most notably, `__proto__`)\n  //\n  return str.toLowerCase().toUpperCase()\n}\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nconst lib = { mdurl, ucmicro }\n\nexport {\n  lib,\n  assign,\n  isString,\n  has,\n  unescapeMd,\n  unescapeAll,\n  isValidEntityCode,\n  fromCodePoint,\n  escapeHtml,\n  arrayReplaceAt,\n  isSpace,\n  isWhiteSpace,\n  isMdAsciiPunct,\n  isPunctChar,\n  escapeRE,\n  normalizeReference\n}\n", "import decode from './lib/decode.mjs'\nimport encode from './lib/encode.mjs'\nimport format from './lib/format.mjs'\nimport parse from './lib/parse.mjs'\n\nexport {\n  decode,\n  encode,\n  format,\n  parse\n}\n", "/* eslint-disable no-bitwise */\n\nconst decodeCache = {}\n\nfunction getDecodeCache (exclude) {\n  let cache = decodeCache[exclude]\n  if (cache) { return cache }\n\n  cache = decodeCache[exclude] = []\n\n  for (let i = 0; i < 128; i++) {\n    const ch = String.fromCharCode(i)\n    cache.push(ch)\n  }\n\n  for (let i = 0; i < exclude.length; i++) {\n    const ch = exclude.charCodeAt(i)\n    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2)\n  }\n\n  return cache\n}\n\n// Decode percent-encoded string.\n//\nfunction decode (string, exclude) {\n  if (typeof exclude !== 'string') {\n    exclude = decode.defaultChars\n  }\n\n  const cache = getDecodeCache(exclude)\n\n  return string.replace(/(%[a-f0-9]{2})+/gi, function (seq) {\n    let result = ''\n\n    for (let i = 0, l = seq.length; i < l; i += 3) {\n      const b1 = parseInt(seq.slice(i + 1, i + 3), 16)\n\n      if (b1 < 0x80) {\n        result += cache[b1]\n        continue\n      }\n\n      if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {\n        // 110xxxxx 10xxxxxx\n        const b2 = parseInt(seq.slice(i + 4, i + 6), 16)\n\n        if ((b2 & 0xC0) === 0x80) {\n          const chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F)\n\n          if (chr < 0x80) {\n            result += '\\ufffd\\ufffd'\n          } else {\n            result += String.fromCharCode(chr)\n          }\n\n          i += 3\n          continue\n        }\n      }\n\n      if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {\n        // 1110xxxx 10xxxxxx 10xxxxxx\n        const b2 = parseInt(seq.slice(i + 4, i + 6), 16)\n        const b3 = parseInt(seq.slice(i + 7, i + 9), 16)\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n          const chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F)\n\n          if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {\n            result += '\\ufffd\\ufffd\\ufffd'\n          } else {\n            result += String.fromCharCode(chr)\n          }\n\n          i += 6\n          continue\n        }\n      }\n\n      if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {\n        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n        const b2 = parseInt(seq.slice(i + 4, i + 6), 16)\n        const b3 = parseInt(seq.slice(i + 7, i + 9), 16)\n        const b4 = parseInt(seq.slice(i + 10, i + 12), 16)\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n          let chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F)\n\n          if (chr < 0x10000 || chr > 0x10FFFF) {\n            result += '\\ufffd\\ufffd\\ufffd\\ufffd'\n          } else {\n            chr -= 0x10000\n            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF))\n          }\n\n          i += 9\n          continue\n        }\n      }\n\n      result += '\\ufffd'\n    }\n\n    return result\n  })\n}\n\ndecode.defaultChars = ';/?:@&=+$,#'\ndecode.componentChars = ''\n\nexport default decode\n", "const encodeCache = {}\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache (exclude) {\n  let cache = encodeCache[exclude]\n  if (cache) { return cache }\n\n  cache = encodeCache[exclude] = []\n\n  for (let i = 0; i < 128; i++) {\n    const ch = String.fromCharCode(i)\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch)\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2))\n    }\n  }\n\n  for (let i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i]\n  }\n\n  return cache\n}\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode (string, exclude, keepEscaped) {\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped = exclude\n    exclude = encode.defaultChars\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true\n  }\n\n  const cache = getEncodeCache(exclude)\n  let result = ''\n\n  for (let i = 0, l = string.length; i < l; i++) {\n    const code = string.charCodeAt(i)\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3)\n        i += 2\n        continue\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code]\n      continue\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        const nextCode = string.charCodeAt(i + 1)\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1])\n          i++\n          continue\n        }\n      }\n      result += '%EF%BF%BD'\n      continue\n    }\n\n    result += encodeURIComponent(string[i])\n  }\n\n  return result\n}\n\nencode.defaultChars = \";/?:@&=+$,-_.!~*'()#\"\nencode.componentChars = \"-_.!~*'()\"\n\nexport default encode\n", "export default function format (url) {\n  let result = ''\n\n  result += url.protocol || ''\n  result += url.slashes ? '//' : ''\n  result += url.auth ? url.auth + '@' : ''\n\n  if (url.hostname && url.hostname.indexOf(':') !== -1) {\n    // ipv6 address\n    result += '[' + url.hostname + ']'\n  } else {\n    result += url.hostname || ''\n  }\n\n  result += url.port ? ':' + url.port : ''\n  result += url.pathname || ''\n  result += url.search || ''\n  result += url.hash || ''\n\n  return result\n};\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\n\nfunction Url () {\n  this.protocol = null\n  this.slashes = null\n  this.auth = null\n  this.port = null\n  this.hostname = null\n  this.hash = null\n  this.search = null\n  this.pathname = null\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nconst protocolPattern = /^([a-z0-9.+-]+:)/i\nconst portPattern = /:[0-9]*$/\n\n// Special case for a simple path URL\n/* eslint-disable-next-line no-useless-escape */\nconst simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/\n\n// RFC 2396: characters reserved for delimiting URLs.\n// We actually just auto-escape these.\nconst delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t']\n\n// RFC 2396: characters not allowed for various reasons.\nconst unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims)\n\n// Allowed by RFCs, but cause of XSS attacks.  Always escape these.\nconst autoEscape = ['\\''].concat(unwise)\n// Characters that are never ever allowed in a hostname.\n// Note that any invalid chars are also handled, but these\n// are the ones that are *expected* to be seen, so we fast-path\n// them.\nconst nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape)\nconst hostEndingChars = ['/', '?', '#']\nconst hostnameMaxLen = 255\nconst hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/\nconst hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/\n// protocols that can allow \"unsafe\" and \"unwise\" chars.\n// protocols that never have a hostname.\nconst hostlessProtocol = {\n  javascript: true,\n  'javascript:': true\n}\n// protocols that always contain a // bit.\nconst slashedProtocol = {\n  http: true,\n  https: true,\n  ftp: true,\n  gopher: true,\n  file: true,\n  'http:': true,\n  'https:': true,\n  'ftp:': true,\n  'gopher:': true,\n  'file:': true\n}\n\nfunction urlParse (url, slashesDenoteHost) {\n  if (url && url instanceof Url) return url\n\n  const u = new Url()\n  u.parse(url, slashesDenoteHost)\n  return u\n}\n\nUrl.prototype.parse = function (url, slashesDenoteHost) {\n  let lowerProto, hec, slashes\n  let rest = url\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim()\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    const simplePath = simplePathPattern.exec(rest)\n    if (simplePath) {\n      this.pathname = simplePath[1]\n      if (simplePath[2]) {\n        this.search = simplePath[2]\n      }\n      return this\n    }\n  }\n\n  let proto = protocolPattern.exec(rest)\n  if (proto) {\n    proto = proto[0]\n    lowerProto = proto.toLowerCase()\n    this.protocol = proto\n    rest = rest.substr(proto.length)\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  /* eslint-disable-next-line no-useless-escape */\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    slashes = rest.substr(0, 2) === '//'\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2)\n      this.slashes = true\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    let hostEnd = -1\n    for (let i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i])\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec\n      }\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    let auth, atSign\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@')\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd)\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign)\n      rest = rest.slice(atSign + 1)\n      this.auth = auth\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1\n    for (let i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i])\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec\n      }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) {\n      hostEnd = rest.length\n    }\n\n    if (rest[hostEnd - 1] === ':') { hostEnd-- }\n    const host = rest.slice(0, hostEnd)\n    rest = rest.slice(hostEnd)\n\n    // pull out port.\n    this.parseHost(host)\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || ''\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    const ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']'\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      const hostparts = this.hostname.split(/\\./)\n      for (let i = 0, l = hostparts.length; i < l; i++) {\n        const part = hostparts[i]\n        if (!part) { continue }\n        if (!part.match(hostnamePartPattern)) {\n          let newpart = ''\n          for (let j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x'\n            } else {\n              newpart += part[j]\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            const validParts = hostparts.slice(0, i)\n            const notHost = hostparts.slice(i + 1)\n            const bit = part.match(hostnamePartStart)\n            if (bit) {\n              validParts.push(bit[1])\n              notHost.unshift(bit[2])\n            }\n            if (notHost.length) {\n              rest = notHost.join('.') + rest\n            }\n            this.hostname = validParts.join('.')\n            break\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = ''\n    }\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2)\n    }\n  }\n\n  // chop off from the tail first.\n  const hash = rest.indexOf('#')\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash)\n    rest = rest.slice(0, hash)\n  }\n  const qm = rest.indexOf('?')\n  if (qm !== -1) {\n    this.search = rest.substr(qm)\n    rest = rest.slice(0, qm)\n  }\n  if (rest) { this.pathname = rest }\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = ''\n  }\n\n  return this\n}\n\nUrl.prototype.parseHost = function (host) {\n  let port = portPattern.exec(host)\n  if (port) {\n    port = port[0]\n    if (port !== ':') {\n      this.port = port.substr(1)\n    }\n    host = host.substr(0, host.length - port.length)\n  }\n  if (host) { this.hostname = host }\n}\n\nexport default urlParse\n", "import Any from './properties/Any/regex.mjs';\nimport Cc  from './categories/Cc/regex.mjs';\nimport Cf  from './categories/Cf/regex.mjs';\nimport P   from './categories/P/regex.mjs';\nimport Z   from './categories/Z/regex.mjs';\n\nexport { Any, Cc, Cf, P, Z };\n", "export default /[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/", "export default /[\\0-\\x1F\\x7F-\\x9F]/", "export default /[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u0890\\u0891\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD80D[\\uDC30-\\uDC3F]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/", "export default /[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A\\uDFE2]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/", "export default /[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/", null, null, null, null, null, null, null, null, "// Just a shortcut for bulk export\n\nimport parseLinkLabel from './parse_link_label.mjs'\nimport parseLinkDestination from './parse_link_destination.mjs'\nimport parseLinkTitle from './parse_link_title.mjs'\n\nexport {\n  parseLinkLabel,\n  parseLinkDestination,\n  parseLinkTitle\n}\n", "// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n\nexport default function parseLinkLabel (state, start, disableNested) {\n  let level, found, marker, prevPos\n\n  const max = state.posMax\n  const oldPos = state.pos\n\n  state.pos = start + 1\n  level = 1\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos)\n    if (marker === 0x5D /* ] */) {\n      level--\n      if (level === 0) {\n        found = true\n        break\n      }\n    }\n\n    prevPos = state.pos\n    state.md.inline.skipToken(state)\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++\n      } else if (disableNested) {\n        state.pos = oldPos\n        return -1\n      }\n    }\n  }\n\n  let labelEnd = -1\n\n  if (found) {\n    labelEnd = state.pos\n  }\n\n  // restore old state\n  state.pos = oldPos\n\n  return labelEnd\n}\n", "// Parse link destination\n//\n\nimport { unescapeAll } from '../common/utils.mjs'\n\nexport default function parseLinkDestination (str, start, max) {\n  let code\n  let pos = start\n\n  const result = {\n    ok: false,\n    pos: 0,\n    lines: 0,\n    str: ''\n  }\n\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++\n    while (pos < max) {\n      code = str.charCodeAt(pos)\n      if (code === 0x0A /* \\n */) { return result }\n      if (code === 0x3C /* < */) { return result }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1\n        result.str = unescapeAll(str.slice(start + 1, pos))\n        result.ok = true\n        return result\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2\n        continue\n      }\n\n      pos++\n    }\n\n    // no closing '>'\n    return result\n  }\n\n  // this should be ... } else { ... branch\n\n  let level = 0\n  while (pos < max) {\n    code = str.charCodeAt(pos)\n\n    if (code === 0x20) { break }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) { break }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      if (str.charCodeAt(pos + 1) === 0x20) { break }\n      pos += 2\n      continue\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++\n      if (level > 32) { return result }\n    }\n\n    if (code === 0x29 /* ) */) {\n      if (level === 0) { break }\n      level--\n    }\n\n    pos++\n  }\n\n  if (start === pos) { return result }\n  if (level !== 0) { return result }\n\n  result.str = unescapeAll(str.slice(start, pos))\n  result.pos = pos\n  result.ok = true\n  return result\n}\n", "// Parse link title\n//\n\nimport { unescapeAll } from '../common/utils.mjs'\n\nexport default function parseLinkTitle (str, start, max) {\n  let code, marker\n  let lines = 0\n  let pos = start\n\n  const result = {\n    ok: false,\n    pos: 0,\n    lines: 0,\n    str: ''\n  }\n\n  if (pos >= max) { return result }\n\n  marker = str.charCodeAt(pos)\n\n  if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return result }\n\n  pos++\n\n  // if opening marker is \"(\", switch it to closing marker \")\"\n  if (marker === 0x28) { marker = 0x29 }\n\n  while (pos < max) {\n    code = str.charCodeAt(pos)\n    if (code === marker) {\n      result.pos = pos + 1\n      result.lines = lines\n      result.str = unescapeAll(str.slice(start + 1, pos))\n      result.ok = true\n      return result\n    } else if (code === 0x28 /* ( */ && marker === 0x29 /* ) */) {\n      return result\n    } else if (code === 0x0A) {\n      lines++\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++\n      if (str.charCodeAt(pos) === 0x0A) {\n        lines++\n      }\n    }\n\n    pos++\n  }\n\n  return result\n}\n", "/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n\nimport { assign, unescapeAll, escapeHtml } from './common/utils.mjs'\n\nconst default_rules = {}\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(token.content) +\n          '</code>'\n}\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n'\n}\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n  const info = token.info ? unescapeAll(token.info).trim() : ''\n  let langName = ''\n  let langAttrs = ''\n\n  if (info) {\n    const arr = info.split(/(\\s+)/g)\n    langName = arr[0]\n    langAttrs = arr.slice(2).join('')\n  }\n\n  let highlighted\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content)\n  } else {\n    highlighted = escapeHtml(token.content)\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n'\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .deepClone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    const i = token.attrIndex('class')\n    const tmpAttrs = token.attrs ? token.attrs.slice() : []\n\n    if (i < 0) {\n      tmpAttrs.push(['class', options.langPrefix + langName])\n    } else {\n      tmpAttrs[i] = tmpAttrs[i].slice()\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName\n    }\n\n    // Fake token just to render attributes\n    const tmpToken = {\n      attrs: tmpAttrs\n    }\n\n    return `<pre><code${slf.renderAttrs(tmpToken)}>${highlighted}</code></pre>\\n`\n  }\n\n  return `<pre><code${slf.renderAttrs(token)}>${highlighted}</code></pre>\\n`\n}\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env)\n\n  return slf.renderToken(tokens, idx, options)\n}\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n'\n}\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n'\n}\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content)\n}\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content\n}\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content\n}\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer () {\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules)\n}\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs (token) {\n  let i, l, result\n\n  if (!token.attrs) { return '' }\n\n  result = ''\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"'\n  }\n\n  return result\n}\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken (tokens, idx, options) {\n  const token = tokens[idx]\n  let result = ''\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return ''\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n'\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token)\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /'\n  }\n\n  // Check if we need to add a newline after this tag\n  let needLf = false\n  if (token.block) {\n    needLf = true\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        const nextToken = tokens[idx + 1]\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>'\n\n  return result\n}\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  let result = ''\n  const rules = this.rules\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this)\n    } else {\n      result += this.renderToken(tokens, i, options)\n    }\n  }\n\n  return result\n}\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  let result = ''\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    switch (tokens[i].type) {\n      case 'text':\n        result += tokens[i].content\n        break\n      case 'image':\n        result += this.renderInlineAsText(tokens[i].children, options, env)\n        break\n      case 'html_inline':\n      case 'html_block':\n        result += tokens[i].content\n        break\n      case 'softbreak':\n      case 'hardbreak':\n        result += '\\n'\n        break\n      default:\n        // all other tokens are skipped\n    }\n  }\n\n  return result\n}\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  let result = ''\n  const rules = this.rules\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env)\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this)\n    } else {\n      result += this.renderToken(tokens, i, options, env)\n    }\n  }\n\n  return result\n}\n\nexport default Renderer\n", "/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n\nimport Ruler from './ruler.mjs'\nimport StateCore from './rules_core/state_core.mjs'\n\nimport r_normalize from './rules_core/normalize.mjs'\nimport r_block from './rules_core/block.mjs'\nimport r_inline from './rules_core/inline.mjs'\nimport r_linkify from './rules_core/linkify.mjs'\nimport r_replacements from './rules_core/replacements.mjs'\nimport r_smartquotes from './rules_core/smartquotes.mjs'\nimport r_text_join from './rules_core/text_join.mjs'\n\nconst _rules = [\n  ['normalize',      r_normalize],\n  ['block',          r_block],\n  ['inline',         r_inline],\n  ['linkify',        r_linkify],\n  ['replacements',   r_replacements],\n  ['smartquotes',    r_smartquotes],\n  // `text_join` finds `text_special` tokens (for escape sequences)\n  // and joins them with the rest of the text\n  ['text_join',      r_text_join]\n]\n\n/**\n * new Core()\n **/\nfunction Core () {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler()\n\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1])\n  }\n}\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  const rules = this.ruler.getRules('')\n\n  for (let i = 0, l = rules.length; i < l; i++) {\n    rules[i](state)\n  }\n}\n\nCore.prototype.State = StateCore\n\nexport default Core\n", "/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n\n/**\n * new Ruler()\n **/\nfunction Ruler () {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = []\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null\n}\n\n// Helper methods, should not be used directly\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (let i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i\n    }\n  }\n  return -1\n}\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  const self = this\n  const chains = ['']\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) { return }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName)\n      }\n    })\n  })\n\n  self.__cache__ = {}\n\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = []\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) { return }\n\n      if (chain && rule.alt.indexOf(chain) < 0) { return }\n\n      self.__cache__[chain].push(rule.fn)\n    })\n  })\n}\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  const index = this.__find__(name)\n  const opt = options || {}\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + name) }\n\n  this.__rules__[index].fn = fn\n  this.__rules__[index].alt = opt.alt || []\n  this.__cache__ = null\n}\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  const index = this.__find__(beforeName)\n  const opt = options || {}\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName) }\n\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  })\n\n  this.__cache__ = null\n}\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  const index = this.__find__(afterName)\n  const opt = options || {}\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + afterName) }\n\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  })\n\n  this.__cache__ = null\n}\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  const opt = options || {}\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  })\n\n  this.__cache__ = null\n}\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [list] }\n\n  const result = []\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    const idx = this.__find__(name)\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return }\n      throw new Error('Rules manager: invalid rule name ' + name)\n    }\n    this.__rules__[idx].enabled = true\n    result.push(name)\n  }, this)\n\n  this.__cache__ = null\n  return result\n}\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [list] }\n\n  this.__rules__.forEach(function (rule) { rule.enabled = false })\n\n  this.enable(list, ignoreInvalid)\n}\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [list] }\n\n  const result = []\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    const idx = this.__find__(name)\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return }\n      throw new Error('Rules manager: invalid rule name ' + name)\n    }\n    this.__rules__[idx].enabled = false\n    result.push(name)\n  }, this)\n\n  this.__cache__ = null\n  return result\n}\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__()\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || []\n}\n\nexport default Ruler\n", "// Core state object\n//\n\nimport Token from '../token.mjs'\n\nfunction StateCore (src, md, env) {\n  this.src = src\n  this.env = env\n  this.tokens = []\n  this.inlineMode = false\n  this.md = md // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token\n\nexport default StateCore\n", "// Token class\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token (type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type     = type\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag      = tag\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs    = null\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map      = null\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting  = nesting\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level    = 0\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content  = ''\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup   = ''\n\n  /**\n   * Token#info -> String\n   *\n   * Additional information:\n   *\n   * - Info string for \"fence\" tokens\n   * - The value \"auto\" for autolink \"link_open\" and \"link_close\" tokens\n   * - The string value of the item marker for ordered-list \"list_item_open\" tokens\n   **/\n  this.info     = ''\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta     = null\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block    = false\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden   = false\n}\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex (name) {\n  if (!this.attrs) { return -1 }\n\n  const attrs = this.attrs\n\n  for (let i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) { return i }\n  }\n  return -1\n}\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush (attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData)\n  } else {\n    this.attrs = [attrData]\n  }\n}\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet (name, value) {\n  const idx = this.attrIndex(name)\n  const attrData = [name, value]\n\n  if (idx < 0) {\n    this.attrPush(attrData)\n  } else {\n    this.attrs[idx] = attrData\n  }\n}\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet (name) {\n  const idx = this.attrIndex(name)\n  let value = null\n  if (idx >= 0) {\n    value = this.attrs[idx][1]\n  }\n  return value\n}\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin (name, value) {\n  const idx = this.attrIndex(name)\n\n  if (idx < 0) {\n    this.attrPush([name, value])\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value\n  }\n}\n\nexport default Token\n", "// Normalize input string\n\n// https://spec.commonmark.org/0.29/#line-ending\nconst NEWLINES_RE  = /\\r\\n?|\\n/g\nconst NULL_RE      = /\\0/g\n\nexport default function normalize (state) {\n  let str\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n')\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD')\n\n  state.src = str\n}\n", "export default function block (state) {\n  let token\n\n  if (state.inlineMode) {\n    token          = new state.Token('inline', '', 0)\n    token.content  = state.src\n    token.map      = [0, 1]\n    token.children = []\n    state.tokens.push(token)\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens)\n  }\n}\n", "export default function inline (state) {\n  const tokens = state.tokens\n\n  // Parse inlines\n  for (let i = 0, l = tokens.length; i < l; i++) {\n    const tok = tokens[i]\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children)\n    }\n  }\n}\n", "// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n\nimport { arrayReplaceAt } from '../common/utils.mjs'\n\nfunction isLinkOpen (str) {\n  return /^<a[>\\s]/i.test(str)\n}\nfunction isLinkClose (str) {\n  return /^<\\/a\\s*>/i.test(str)\n}\n\nexport default function linkify (state) {\n  const blockTokens = state.tokens\n\n  if (!state.md.options.linkify) { return }\n\n  for (let j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue\n    }\n\n    let tokens = blockTokens[j].children\n\n    let htmlLinkLevel = 0\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      const currentToken = tokens[i]\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--\n        }\n        continue\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++\n        }\n      }\n      if (htmlLinkLevel > 0) { continue }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n        const text = currentToken.content\n        let links = state.md.linkify.match(text)\n\n        // Now split string to nodes\n        const nodes = []\n        let level = currentToken.level\n        let lastPos = 0\n\n        // forbid escape sequence at the start of the string,\n        // this avoids http\\://example.com/ from being linkified as\n        // http:<a href=\"//example.com/\">//example.com/</a>\n        if (links.length > 0 &&\n            links[0].index === 0 &&\n            i > 0 &&\n            tokens[i - 1].type === 'text_special') {\n          links = links.slice(1)\n        }\n\n        for (let ln = 0; ln < links.length; ln++) {\n          const url = links[ln].url\n          const fullUrl = state.md.normalizeLink(url)\n          if (!state.md.validateLink(fullUrl)) { continue }\n\n          let urlText = links[ln].text\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '')\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '')\n          } else {\n            urlText = state.md.normalizeLinkText(urlText)\n          }\n\n          const pos = links[ln].index\n\n          if (pos > lastPos) {\n            const token   = new state.Token('text', '', 0)\n            token.content = text.slice(lastPos, pos)\n            token.level   = level\n            nodes.push(token)\n          }\n\n          const token_o   = new state.Token('link_open', 'a', 1)\n          token_o.attrs   = [['href', fullUrl]]\n          token_o.level   = level++\n          token_o.markup  = 'linkify'\n          token_o.info    = 'auto'\n          nodes.push(token_o)\n\n          const token_t   = new state.Token('text', '', 0)\n          token_t.content = urlText\n          token_t.level   = level\n          nodes.push(token_t)\n\n          const token_c   = new state.Token('link_close', 'a', -1)\n          token_c.level   = --level\n          token_c.markup  = 'linkify'\n          token_c.info    = 'auto'\n          nodes.push(token_c)\n\n          lastPos = links[ln].lastIndex\n        }\n        if (lastPos < text.length) {\n          const token   = new state.Token('text', '', 0)\n          token.content = text.slice(lastPos)\n          token.level   = level\n          nodes.push(token)\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes)\n      }\n    }\n  }\n}\n", "// Simple typographic replacements\n//\n// (c) (C) \u2192 \u00A9\n// (tm) (TM) \u2192 \u2122\n// (r) (R) \u2192 \u00AE\n// +- \u2192 \u00B1\n// ... \u2192 \u2026 (also ?.... \u2192 ?.., !.... \u2192 !..)\n// ???????? \u2192 ???, !!!!! \u2192 !!!, `,,` \u2192 `,`\n// -- \u2192 &ndash;, --- \u2192 &mdash;\n//\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> \u00BD, \u00BC, \u00BE\n// - multiplications 2 x 4 -> 2 \u00D7 4\n\nconst RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nconst SCOPED_ABBR_TEST_RE = /\\((c|tm|r)\\)/i\n\nconst SCOPED_ABBR_RE = /\\((c|tm|r)\\)/ig\nconst SCOPED_ABBR = {\n  c: '\u00A9',\n  r: '\u00AE',\n  tm: '\u2122'\n}\n\nfunction replaceFn (match, name) {\n  return SCOPED_ABBR[name.toLowerCase()]\n}\n\nfunction replace_scoped (inlineTokens) {\n  let inside_autolink = 0\n\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i]\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn)\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++\n    }\n  }\n}\n\nfunction replace_rare (inlineTokens) {\n  let inside_autolink = 0\n\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i]\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n          .replace(/\\+-/g, '\u00B1')\n          // .., ..., ....... -> \u2026\n          // but ?..... & !..... -> ?.. & !..\n          .replace(/\\.{2,}/g, '\u2026').replace(/([?!])\u2026/g, '$1..')\n          .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n          // em-dash\n          .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014')\n          // en-dash\n          .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013')\n          .replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013')\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++\n    }\n  }\n}\n\nexport default function replace (state) {\n  let blkIdx\n\n  if (!state.md.options.typographer) { return }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline') { continue }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children)\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children)\n    }\n  }\n}\n", "// Convert straight quotation marks to typographic ones\n//\n\nimport { isWhiteSpace, isPunctChar, isMdAsciiPunct } from '../common/utils.mjs'\n\nconst QUOTE_TEST_RE = /['\"]/\nconst QUOTE_RE = /['\"]/g\nconst APOSTROPHE = '\\u2019' /* \u2019 */\n\nfunction replaceAt (str, index, ch) {\n  return str.slice(0, index) + ch + str.slice(index + 1)\n}\n\nfunction process_inlines (tokens, state) {\n  let j\n\n  const stack = []\n\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i]\n\n    const thisLevel = tokens[i].level\n\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) { break }\n    }\n    stack.length = j + 1\n\n    if (token.type !== 'text') { continue }\n\n    let text = token.content\n    let pos = 0\n    let max = text.length\n\n    /* eslint no-labels:0,block-scoped-var:0 */\n    OUTER:\n    while (pos < max) {\n      QUOTE_RE.lastIndex = pos\n      const t = QUOTE_RE.exec(text)\n      if (!t) { break }\n\n      let canOpen = true\n      let canClose = true\n      pos = t.index + 1\n      const isSingle = (t[0] === \"'\")\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      let lastChar = 0x20\n\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1)\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break // lastChar defaults to 0x20\n          if (!tokens[j].content) continue // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1)\n          break\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      let nextChar = 0x20\n\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos)\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break // nextChar defaults to 0x20\n          if (!tokens[j].content) continue // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          nextChar = tokens[j].content.charCodeAt(0)\n          break\n        }\n      }\n\n      const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar))\n      const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar))\n\n      const isLastWhiteSpace = isWhiteSpace(lastChar)\n      const isNextWhiteSpace = isWhiteSpace(nextChar)\n\n      if (isNextWhiteSpace) {\n        canOpen = false\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false\n        }\n      }\n\n      if (isLastWhiteSpace) {\n        canClose = false\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false\n        }\n      }\n\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false\n        }\n      }\n\n      if (canOpen && canClose) {\n        // Replace quotes in the middle of punctuation sequence, but not\n        // in the middle of the words, i.e.:\n        //\n        // 1. foo \" bar \" baz - not replaced\n        // 2. foo-\"-bar-\"-baz - replaced\n        // 3. foo\"bar\"baz     - not replaced\n        //\n        canOpen = isLastPunctChar\n        canClose = isNextPunctChar\n      }\n\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE)\n        }\n        continue\n      }\n\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          let item = stack[j]\n          if (stack[j].level < thisLevel) { break }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j]\n\n            let openQuote\n            let closeQuote\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2]\n              closeQuote = state.md.options.quotes[3]\n            } else {\n              openQuote = state.md.options.quotes[0]\n              closeQuote = state.md.options.quotes[1]\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote)\n            tokens[item.token].content = replaceAt(\n              tokens[item.token].content, item.pos, openQuote)\n\n            pos += closeQuote.length - 1\n            if (item.token === i) { pos += openQuote.length - 1 }\n\n            text = token.content\n            max = text.length\n\n            stack.length = j\n            continue OUTER\n          }\n        }\n      }\n\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        })\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE)\n      }\n    }\n  }\n}\n\nexport default function smartquotes (state) {\n  /* eslint max-depth:0 */\n  if (!state.md.options.typographer) { return }\n\n  for (let blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline' ||\n        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue\n    }\n\n    process_inlines(state.tokens[blkIdx].children, state)\n  }\n}\n", "// Join raw text tokens with the rest of the text\n//\n// This is set as a separate rule to provide an opportunity for plugins\n// to run text replacements after text join, but before escape join.\n//\n// For example, `\\:)` shouldn't be replaced with an emoji.\n//\n\nexport default function text_join (state) {\n  let curr, last\n  const blockTokens = state.tokens\n  const l = blockTokens.length\n\n  for (let j = 0; j < l; j++) {\n    if (blockTokens[j].type !== 'inline') continue\n\n    const tokens = blockTokens[j].children\n    const max = tokens.length\n\n    for (curr = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text_special') {\n        tokens[curr].type = 'text'\n      }\n    }\n\n    for (curr = last = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text' &&\n          curr + 1 < max &&\n          tokens[curr + 1].type === 'text') {\n        // collapse two adjacent text nodes\n        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content\n      } else {\n        if (curr !== last) { tokens[last] = tokens[curr] }\n\n        last++\n      }\n    }\n\n    if (curr !== last) {\n      tokens.length = last\n    }\n  }\n}\n", "/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n\nimport Ruler from './ruler.mjs'\nimport StateBlock from './rules_block/state_block.mjs'\n\nimport r_table from './rules_block/table.mjs'\nimport r_code from './rules_block/code.mjs'\nimport r_fence from './rules_block/fence.mjs'\nimport r_blockquote from './rules_block/blockquote.mjs'\nimport r_hr from './rules_block/hr.mjs'\nimport r_list from './rules_block/list.mjs'\nimport r_reference from './rules_block/reference.mjs'\nimport r_html_block from './rules_block/html_block.mjs'\nimport r_heading from './rules_block/heading.mjs'\nimport r_lheading from './rules_block/lheading.mjs'\nimport r_paragraph from './rules_block/paragraph.mjs'\n\nconst _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  ['table',      r_table,      ['paragraph', 'reference']],\n  ['code',       r_code],\n  ['fence',      r_fence,      ['paragraph', 'reference', 'blockquote', 'list']],\n  ['blockquote', r_blockquote, ['paragraph', 'reference', 'blockquote', 'list']],\n  ['hr',         r_hr,         ['paragraph', 'reference', 'blockquote', 'list']],\n  ['list',       r_list,       ['paragraph', 'reference', 'blockquote']],\n  ['reference',  r_reference],\n  ['html_block', r_html_block, ['paragraph', 'reference', 'blockquote']],\n  ['heading',    r_heading,    ['paragraph', 'reference', 'blockquote']],\n  ['lheading',   r_lheading],\n  ['paragraph',  r_paragraph]\n]\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock () {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler()\n\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() })\n  }\n}\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  const rules = this.ruler.getRules('')\n  const len = rules.length\n  const maxNesting = state.md.options.maxNesting\n  let line = startLine\n  let hasEmptyLines = false\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line)\n    if (line >= endLine) { break }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) { break }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine\n      break\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n    const prevLine = state.line\n    let ok = false\n\n    for (let i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false)\n      if (ok) {\n        if (prevLine >= state.line) {\n          throw new Error(\"block rule didn't increment state.line\")\n        }\n        break\n      }\n    }\n\n    // this can only happen if user disables paragraph rule\n    if (!ok) throw new Error('none of the block rules matched')\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true\n    }\n\n    line = state.line\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true\n      line++\n      state.line = line\n    }\n  }\n}\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  if (!src) { return }\n\n  const state = new this.State(src, md, env, outTokens)\n\n  this.tokenize(state, state.line, state.lineMax)\n}\n\nParserBlock.prototype.State = StateBlock\n\nexport default ParserBlock\n", "// Parser state class\n\nimport Token from '../token.mjs'\nimport { isSpace } from '../common/utils.mjs'\n\nfunction StateBlock (src, md, env, tokens) {\n  this.src = src\n\n  // link to parser instance\n  this.md     = md\n\n  this.env = env\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens\n\n  this.bMarks = []  // line begin offsets for fast jumps\n  this.eMarks = []  // line end offsets for fast jumps\n  this.tShift = []  // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = []  // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = []\n\n  // block parser variables\n\n  // required block content indent (for example, if we are\n  // inside a list, it would be positioned after list marker)\n  this.blkIndent  = 0\n  this.line       = 0 // line index in src\n  this.lineMax    = 0 // lines count\n  this.tight      = false  // loose/tight mode for lists\n  this.ddIndent   = -1 // indent of the current dd block (-1 if there isn't any)\n  this.listIndent = -1 // indent of the current list block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root'\n\n  this.level = 0\n\n  // Create caches\n  // Generate markers.\n  const s = this.src\n\n  for (let start = 0, pos = 0, indent = 0, offset = 0, len = s.length, indent_found = false; pos < len; pos++) {\n    const ch = s.charCodeAt(pos)\n\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++\n\n        if (ch === 0x09) {\n          offset += 4 - offset % 4\n        } else {\n          offset++\n        }\n        continue\n      } else {\n        indent_found = true\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) { pos++ }\n      this.bMarks.push(start)\n      this.eMarks.push(pos)\n      this.tShift.push(indent)\n      this.sCount.push(offset)\n      this.bsCount.push(0)\n\n      indent_found = false\n      indent = 0\n      offset = 0\n      start = pos + 1\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length)\n  this.eMarks.push(s.length)\n  this.tShift.push(0)\n  this.sCount.push(0)\n  this.bsCount.push(0)\n\n  this.lineMax = this.bMarks.length - 1 // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  const token = new Token(type, tag, nesting)\n  token.block = true\n\n  if (nesting < 0) this.level-- // closing tag\n  token.level = this.level\n  if (nesting > 0) this.level++ // opening tag\n\n  this.tokens.push(token)\n  return token\n}\n\nStateBlock.prototype.isEmpty = function isEmpty (line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line]\n}\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines (from) {\n  for (let max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break\n    }\n  }\n  return from\n}\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces (pos) {\n  for (let max = this.src.length; pos < max; pos++) {\n    const ch = this.src.charCodeAt(pos)\n    if (!isSpace(ch)) { break }\n  }\n  return pos\n}\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack (pos, min) {\n  if (pos <= min) { return pos }\n\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1 }\n  }\n  return pos\n}\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars (pos, code) {\n  for (let max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) { break }\n  }\n  return pos\n}\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack (pos, code, min) {\n  if (pos <= min) { return pos }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) { return pos + 1 }\n  }\n  return pos\n}\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines (begin, end, indent, keepLastLF) {\n  if (begin >= end) {\n    return ''\n  }\n\n  const queue = new Array(end - begin)\n\n  for (let i = 0, line = begin; line < end; line++, i++) {\n    let lineIndent = 0\n    const lineStart = this.bMarks[line]\n    let first = lineStart\n    let last\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1\n    } else {\n      last = this.eMarks[line]\n    }\n\n    while (first < last && lineIndent < indent) {\n      const ch = this.src.charCodeAt(first)\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4\n        } else {\n          lineIndent++\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++\n      } else {\n        break\n      }\n\n      first++\n    }\n\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last)\n    } else {\n      queue[i] = this.src.slice(first, last)\n    }\n  }\n\n  return queue.join('')\n}\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token\n\nexport default StateBlock\n", "// GFM table, https://github.github.com/gfm/#tables-extension-\n\nimport { isSpace } from '../common/utils.mjs'\n\nfunction getLine (state, line) {\n  const pos = state.bMarks[line] + state.tShift[line]\n  const max = state.eMarks[line]\n\n  return state.src.slice(pos, max)\n}\n\nfunction escapedSplit (str) {\n  const result = []\n  const max = str.length\n\n  let pos = 0\n  let ch = str.charCodeAt(pos)\n  let isEscaped = false\n  let lastPos = 0\n  let current = ''\n\n  while (pos < max) {\n    if (ch === 0x7c/* | */) {\n      if (!isEscaped) {\n        // pipe separating cells, '|'\n        result.push(current + str.substring(lastPos, pos))\n        current = ''\n        lastPos = pos + 1\n      } else {\n        // escaped pipe, '\\|'\n        current += str.substring(lastPos, pos - 1)\n        lastPos = pos\n      }\n    }\n\n    isEscaped = (ch === 0x5c/* \\ */)\n    pos++\n\n    ch = str.charCodeAt(pos)\n  }\n\n  result.push(current + str.substring(lastPos))\n\n  return result\n}\n\nexport default function table (state, startLine, endLine, silent) {\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false }\n\n  let nextLine = startLine + 1\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  let pos = state.bMarks[nextLine] + state.tShift[nextLine]\n  if (pos >= state.eMarks[nextLine]) { return false }\n\n  const firstCh = state.src.charCodeAt(pos++)\n  if (firstCh !== 0x7C/* | */ && firstCh !== 0x2D/* - */ && firstCh !== 0x3A/* : */) { return false }\n\n  if (pos >= state.eMarks[nextLine]) { return false }\n\n  const secondCh = state.src.charCodeAt(pos++)\n  if (secondCh !== 0x7C/* | */ && secondCh !== 0x2D/* - */ && secondCh !== 0x3A/* : */ && !isSpace(secondCh)) {\n    return false\n  }\n\n  // if first character is '-', then second character must not be a space\n  // (due to parsing ambiguity with list)\n  if (firstCh === 0x2D/* - */ && isSpace(secondCh)) { return false }\n\n  while (pos < state.eMarks[nextLine]) {\n    const ch = state.src.charCodeAt(pos)\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false }\n\n    pos++\n  }\n\n  let lineText = getLine(state, startLine + 1)\n  let columns = lineText.split('|')\n  const aligns = []\n  for (let i = 0; i < columns.length; i++) {\n    const t = columns[i].trim()\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue\n      } else {\n        return false\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right')\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left')\n    } else {\n      aligns.push('')\n    }\n  }\n\n  lineText = getLine(state, startLine).trim()\n  if (lineText.indexOf('|') === -1) { return false }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n  columns = escapedSplit(lineText)\n  if (columns.length && columns[0] === '') columns.shift()\n  if (columns.length && columns[columns.length - 1] === '') columns.pop()\n\n  // header row will define an amount of columns in the entire table,\n  // and align row should be exactly the same (the rest of the rows can differ)\n  const columnCount = columns.length\n  if (columnCount === 0 || columnCount !== aligns.length) { return false }\n\n  if (silent) { return true }\n\n  const oldParentType = state.parentType\n  state.parentType = 'table'\n\n  // use 'blockquote' lists for termination because it's\n  // the most similar to tables\n  const terminatorRules = state.md.block.ruler.getRules('blockquote')\n\n  const token_to = state.push('table_open', 'table', 1)\n  const tableLines = [startLine, 0]\n  token_to.map = tableLines\n\n  const token_tho = state.push('thead_open', 'thead', 1)\n  token_tho.map = [startLine, startLine + 1]\n\n  const token_htro = state.push('tr_open', 'tr', 1)\n  token_htro.map = [startLine, startLine + 1]\n\n  for (let i = 0; i < columns.length; i++) {\n    const token_ho = state.push('th_open', 'th', 1)\n    if (aligns[i]) {\n      token_ho.attrs  = [['style', 'text-align:' + aligns[i]]]\n    }\n\n    const token_il = state.push('inline', '', 0)\n    token_il.content  = columns[i].trim()\n    token_il.children = []\n\n    state.push('th_close', 'th', -1)\n  }\n\n  state.push('tr_close', 'tr', -1)\n  state.push('thead_close', 'thead', -1)\n\n  let tbodyLines\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break }\n\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n\n    if (terminate) { break }\n    lineText = getLine(state, nextLine).trim()\n    if (!lineText) { break }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break }\n    columns = escapedSplit(lineText)\n    if (columns.length && columns[0] === '') columns.shift()\n    if (columns.length && columns[columns.length - 1] === '') columns.pop()\n\n    if (nextLine === startLine + 2) {\n      const token_tbo = state.push('tbody_open', 'tbody', 1)\n      token_tbo.map = tbodyLines = [startLine + 2, 0]\n    }\n\n    const token_tro = state.push('tr_open', 'tr', 1)\n    token_tro.map = [nextLine, nextLine + 1]\n\n    for (let i = 0; i < columnCount; i++) {\n      const token_tdo = state.push('td_open', 'td', 1)\n      if (aligns[i]) {\n        token_tdo.attrs  = [['style', 'text-align:' + aligns[i]]]\n      }\n\n      const token_il = state.push('inline', '', 0)\n      token_il.content  = columns[i] ? columns[i].trim() : ''\n      token_il.children = []\n\n      state.push('td_close', 'td', -1)\n    }\n    state.push('tr_close', 'tr', -1)\n  }\n\n  if (tbodyLines) {\n    state.push('tbody_close', 'tbody', -1)\n    tbodyLines[1] = nextLine\n  }\n\n  state.push('table_close', 'table', -1)\n  tableLines[1] = nextLine\n\n  state.parentType = oldParentType\n  state.line = nextLine\n  return true\n}\n", "// Code block (4 spaces padded)\n\nexport default function code (state, startLine, endLine/*, silent */) {\n  if (state.sCount[startLine] - state.blkIndent < 4) { return false }\n\n  let nextLine = startLine + 1\n  let last = nextLine\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++\n      continue\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++\n      last = nextLine\n      continue\n    }\n    break\n  }\n\n  state.line = last\n\n  const token   = state.push('code_block', 'code', 0)\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n'\n  token.map     = [startLine, state.line]\n\n  return true\n}\n", "// fences (``` lang, ~~~ lang)\n\nexport default function fence (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  if (pos + 3 > max) { return false }\n\n  const marker = state.src.charCodeAt(pos)\n\n  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {\n    return false\n  }\n\n  // scan marker length\n  let mem = pos\n  pos = state.skipChars(pos, marker)\n\n  let len = pos - mem\n\n  if (len < 3) { return false }\n\n  const markup = state.src.slice(mem, pos)\n  const params = state.src.slice(pos, max)\n\n  if (marker === 0x60 /* ` */) {\n    if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n      return false\n    }\n  }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) { return true }\n\n  // search end of block\n  let nextLine = startLine\n  let haveEndMarker = false\n\n  for (;;) {\n    nextLine++\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine]\n    max = state.eMarks[nextLine]\n\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) { continue }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue\n    }\n\n    pos = state.skipChars(pos, marker)\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) { continue }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos)\n\n    if (pos < max) { continue }\n\n    haveEndMarker = true\n    // found!\n    break\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine]\n\n  state.line = nextLine + (haveEndMarker ? 1 : 0)\n\n  const token   = state.push('fence', 'code', 0)\n  token.info    = params\n  token.content = state.getLines(startLine + 1, nextLine, len, true)\n  token.markup  = markup\n  token.map     = [startLine, state.line]\n\n  return true\n}\n", "// Block quotes\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function blockquote (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  const oldLineMax = state.lineMax\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos) !== 0x3E/* > */) { return false }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) { return true }\n\n  const oldBMarks  = []\n  const oldBSCount = []\n  const oldSCount  = []\n  const oldTShift  = []\n\n  const terminatorRules = state.md.block.ruler.getRules('blockquote')\n\n  const oldParentType = state.parentType\n  state.parentType = 'blockquote'\n  let lastLineEmpty = false\n  let nextLine\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    const isOutdented = state.sCount[nextLine] < state.blkIndent\n\n    pos = state.bMarks[nextLine] + state.tShift[nextLine]\n    max = state.eMarks[nextLine]\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !isOutdented) {\n      // This line is inside the blockquote.\n\n      // set offset past spaces and \">\"\n      let initial = state.sCount[nextLine] + 1\n      let spaceAfterMarker\n      let adjustTab\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++\n        initial++\n        adjustTab = false\n        spaceAfterMarker = true\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true\n\n        if ((state.bsCount[nextLine] + initial) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++\n          initial++\n          adjustTab = false\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true\n        }\n      } else {\n        spaceAfterMarker = false\n      }\n\n      let offset = initial\n      oldBMarks.push(state.bMarks[nextLine])\n      state.bMarks[nextLine] = pos\n\n      while (pos < max) {\n        const ch = state.src.charCodeAt(pos)\n\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4\n          } else {\n            offset++\n          }\n        } else {\n          break\n        }\n\n        pos++\n      }\n\n      lastLineEmpty = pos >= max\n\n      oldBSCount.push(state.bsCount[nextLine])\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0)\n\n      oldSCount.push(state.sCount[nextLine])\n      state.sCount[nextLine] = offset - initial\n\n      oldTShift.push(state.tShift[nextLine])\n      state.tShift[nextLine] = pos - state.bMarks[nextLine]\n      continue\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) { break }\n\n    // Case 3: another tag found.\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine\n\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine])\n        oldBSCount.push(state.bsCount[nextLine])\n        oldTShift.push(state.tShift[nextLine])\n        oldSCount.push(state.sCount[nextLine])\n        state.sCount[nextLine] -= state.blkIndent\n      }\n\n      break\n    }\n\n    oldBMarks.push(state.bMarks[nextLine])\n    oldBSCount.push(state.bsCount[nextLine])\n    oldTShift.push(state.tShift[nextLine])\n    oldSCount.push(state.sCount[nextLine])\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1\n  }\n\n  const oldIndent = state.blkIndent\n  state.blkIndent = 0\n\n  const token_o  = state.push('blockquote_open', 'blockquote', 1)\n  token_o.markup = '>'\n  const lines = [startLine, 0]\n  token_o.map    = lines\n\n  state.md.block.tokenize(state, startLine, nextLine)\n\n  const token_c  = state.push('blockquote_close', 'blockquote', -1)\n  token_c.markup = '>'\n\n  state.lineMax = oldLineMax\n  state.parentType = oldParentType\n  lines[1] = state.line\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (let i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i]\n    state.tShift[i + startLine] = oldTShift[i]\n    state.sCount[i + startLine] = oldSCount[i]\n    state.bsCount[i + startLine] = oldBSCount[i]\n  }\n  state.blkIndent = oldIndent\n\n  return true\n}\n", "// Horizontal rule\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function hr (state, startLine, endLine, silent) {\n  const max = state.eMarks[startLine]\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  const marker = state.src.charCodeAt(pos++)\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  let cnt = 1\n  while (pos < max) {\n    const ch = state.src.charCodeAt(pos++)\n    if (ch !== marker && !isSpace(ch)) { return false }\n    if (ch === marker) { cnt++ }\n  }\n\n  if (cnt < 3) { return false }\n\n  if (silent) { return true }\n\n  state.line = startLine + 1\n\n  const token  = state.push('hr', 'hr', 0)\n  token.map    = [startLine, state.line]\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker))\n\n  return true\n}\n", "// Lists\n\nimport { isSpace } from '../common/utils.mjs'\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker (state, startLine) {\n  const max = state.eMarks[startLine]\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n\n  const marker = state.src.charCodeAt(pos++)\n  // Check bullet\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x2B/* + */) {\n    return -1\n  }\n\n  if (pos < max) {\n    const ch = state.src.charCodeAt(pos)\n\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1\n    }\n  }\n\n  return pos\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker (state, startLine) {\n  const start = state.bMarks[startLine] + state.tShift[startLine]\n  const max = state.eMarks[startLine]\n  let pos = start\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) { return -1 }\n\n  let ch = state.src.charCodeAt(pos++)\n\n  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1 }\n\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) { return -1 }\n\n    ch = state.src.charCodeAt(pos++)\n\n    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) { return -1 }\n\n      continue\n    }\n\n    // found valid marker\n    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {\n      break\n    }\n\n    return -1\n  }\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos)\n\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1\n    }\n  }\n  return pos\n}\n\nfunction markTightParagraphs (state, idx) {\n  const level = state.level + 2\n\n  for (let i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true\n      state.tokens[i].hidden = true\n      i += 2\n    }\n  }\n}\n\nexport default function list (state, startLine, endLine, silent) {\n  let max, pos, start, token\n  let nextLine = startLine\n  let tight = true\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false }\n\n  // Special case:\n  //  - item 1\n  //   - item 2\n  //    - item 3\n  //     - item 4\n  //      - this one is a paragraph continuation\n  if (state.listIndent >= 0 &&\n      state.sCount[nextLine] - state.listIndent >= 4 &&\n      state.sCount[nextLine] < state.blkIndent) {\n    return false\n  }\n\n  let isTerminatingParagraph = false\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      isTerminatingParagraph = true\n    }\n  }\n\n  // Detect list type and position after marker\n  let isOrdered\n  let markerValue\n  let posAfterMarker\n  if ((posAfterMarker = skipOrderedListMarker(state, nextLine)) >= 0) {\n    isOrdered = true\n    start = state.bMarks[nextLine] + state.tShift[nextLine]\n    markerValue = Number(state.src.slice(start, posAfterMarker - 1))\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false\n  } else if ((posAfterMarker = skipBulletListMarker(state, nextLine)) >= 0) {\n    isOrdered = false\n  } else {\n    return false\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[nextLine]) return false\n  }\n\n  // For validation mode we can terminate immediately\n  if (silent) { return true }\n\n  // We should terminate list on style change. Remember first one to compare.\n  const markerCharCode = state.src.charCodeAt(posAfterMarker - 1)\n\n  // Start list\n  const listTokIdx = state.tokens.length\n\n  if (isOrdered) {\n    token       = state.push('ordered_list_open', 'ol', 1)\n    if (markerValue !== 1) {\n      token.attrs = [['start', markerValue]]\n    }\n  } else {\n    token       = state.push('bullet_list_open', 'ul', 1)\n  }\n\n  const listLines = [nextLine, 0]\n  token.map    = listLines\n  token.markup = String.fromCharCode(markerCharCode)\n\n  //\n  // Iterate list items\n  //\n\n  let prevEmptyEnd = false\n  const terminatorRules = state.md.block.ruler.getRules('list')\n\n  const oldParentType = state.parentType\n  state.parentType = 'list'\n\n  while (nextLine < endLine) {\n    pos = posAfterMarker\n    max = state.eMarks[nextLine]\n\n    const initial = state.sCount[nextLine] + posAfterMarker - (state.bMarks[nextLine] + state.tShift[nextLine])\n    let offset = initial\n\n    while (pos < max) {\n      const ch = state.src.charCodeAt(pos)\n\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4\n      } else if (ch === 0x20) {\n        offset++\n      } else {\n        break\n      }\n\n      pos++\n    }\n\n    const contentStart = pos\n    let indentAfterMarker\n\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1\n    } else {\n      indentAfterMarker = offset - initial\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) { indentAfterMarker = 1 }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    const indent = initial + indentAfterMarker\n\n    // Run subparser & write tokens\n    token        = state.push('list_item_open', 'li', 1)\n    token.markup = String.fromCharCode(markerCharCode)\n    const itemLines = [nextLine, 0]\n    token.map    = itemLines\n    if (isOrdered) {\n      token.info = state.src.slice(start, posAfterMarker - 1)\n    }\n\n    // change current state, then restore it after parser subcall\n    const oldTight = state.tight\n    const oldTShift = state.tShift[nextLine]\n    const oldSCount = state.sCount[nextLine]\n\n    //  - example list\n    // ^ listIndent position will be here\n    //   ^ blkIndent position will be here\n    //\n    const oldListIndent = state.listIndent\n    state.listIndent = state.blkIndent\n    state.blkIndent = indent\n\n    state.tight = true\n    state.tShift[nextLine] = contentStart - state.bMarks[nextLine]\n    state.sCount[nextLine] = offset\n\n    if (contentStart >= max && state.isEmpty(nextLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine)\n    } else {\n      state.md.block.tokenize(state, nextLine, endLine, true)\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = (state.line - nextLine) > 1 && state.isEmpty(state.line - 1)\n\n    state.blkIndent = state.listIndent\n    state.listIndent = oldListIndent\n    state.tShift[nextLine] = oldTShift\n    state.sCount[nextLine] = oldSCount\n    state.tight = oldTight\n\n    token        = state.push('list_item_close', 'li', -1)\n    token.markup = String.fromCharCode(markerCharCode)\n\n    nextLine = state.line\n    itemLines[1] = nextLine\n\n    if (nextLine >= endLine) { break }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) { break }\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break }\n\n    // fail if terminating block found\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n    if (terminate) { break }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine)\n      if (posAfterMarker < 0) { break }\n      start = state.bMarks[nextLine] + state.tShift[nextLine]\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine)\n      if (posAfterMarker < 0) { break }\n    }\n\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1)\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1)\n  }\n  token.markup = String.fromCharCode(markerCharCode)\n\n  listLines[1] = nextLine\n  state.line = nextLine\n\n  state.parentType = oldParentType\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx)\n  }\n\n  return true\n}\n", "import { isSpace, normalizeReference } from '../common/utils.mjs'\n\nexport default function reference (state, startLine, _endLine, silent) {\n  let lines = 0\n\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n  let nextLine = startLine + 1\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false }\n\n  // Simple check to quickly interrupt scan on [link](url) at the start of line.\n  // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54\n  while (++pos < max) {\n    if (state.src.charCodeAt(pos) === 0x5D /* ] */ &&\n        state.src.charCodeAt(pos - 1) !== 0x5C/* \\ */) {\n      if (pos + 1 === max) { return false }\n      if (state.src.charCodeAt(pos + 1) !== 0x3A/* : */) { return false }\n      break\n    }\n  }\n\n  const endLine = state.lineMax\n\n  // jump line-by-line until empty one or EOF\n  const terminatorRules = state.md.block.ruler.getRules('reference')\n\n  const oldParentType = state.parentType\n  state.parentType = 'reference'\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue }\n\n    // Some tags can terminate paragraph without empty line.\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n    if (terminate) { break }\n  }\n\n  const str = state.getLines(startLine, nextLine, state.blkIndent, false).trim()\n  max = str.length\n  let labelEnd = -1\n\n  for (pos = 1; pos < max; pos++) {\n    const ch = str.charCodeAt(pos)\n    if (ch === 0x5B /* [ */) {\n      return false\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos\n      break\n    } else if (ch === 0x0A /* \\n */) {\n      lines++\n    } else if (ch === 0x5C /* \\ */) {\n      pos++\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        lines++\n      }\n    }\n  }\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    const ch = str.charCodeAt(pos)\n    if (ch === 0x0A) {\n      lines++\n    } else if (isSpace(ch)) {\n      /* eslint no-empty:0 */\n    } else {\n      break\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  const destRes = state.md.helpers.parseLinkDestination(str, pos, max)\n  if (!destRes.ok) { return false }\n\n  const href = state.md.normalizeLink(destRes.str)\n  if (!state.md.validateLink(href)) { return false }\n\n  pos = destRes.pos\n  lines += destRes.lines\n\n  // save cursor state, we could require to rollback later\n  const destEndPos = pos\n  const destEndLineNo = lines\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  const start = pos\n  for (; pos < max; pos++) {\n    const ch = str.charCodeAt(pos)\n    if (ch === 0x0A) {\n      lines++\n    } else if (isSpace(ch)) {\n      /* eslint no-empty:0 */\n    } else {\n      break\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  const titleRes = state.md.helpers.parseLinkTitle(str, pos, max)\n  let title\n\n  if (pos < max && start !== pos && titleRes.ok) {\n    title = titleRes.str\n    pos = titleRes.pos\n    lines += titleRes.lines\n  } else {\n    title = ''\n    pos = destEndPos\n    lines = destEndLineNo\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    const ch = str.charCodeAt(pos)\n    if (!isSpace(ch)) { break }\n    pos++\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = ''\n      pos = destEndPos\n      lines = destEndLineNo\n      while (pos < max) {\n        const ch = str.charCodeAt(pos)\n        if (!isSpace(ch)) { break }\n        pos++\n      }\n    }\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false\n  }\n\n  const label = normalizeReference(str.slice(1, labelEnd))\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /* istanbul ignore if */\n  if (silent) { return true }\n\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {}\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = { title, href }\n  }\n\n  state.parentType = oldParentType\n\n  state.line = startLine + lines + 1\n  return true\n}\n", "// HTML block\n\nimport block_names from '../common/html_blocks.mjs'\nimport { HTML_OPEN_CLOSE_TAG_RE } from '../common/html_re.mjs'\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nconst HTML_SEQUENCES = [\n  [/^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true],\n  [/^<!--/,        /-->/,   true],\n  [/^<\\?/,         /\\?>/,   true],\n  [/^<![A-Z]/,     />/,     true],\n  [/^<!\\[CDATA\\[/, /\\]\\]>/, true],\n  [new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true],\n  [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false]\n]\n\nexport default function html_block (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  if (!state.md.options.html) { return false }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false }\n\n  let lineText = state.src.slice(pos, max)\n\n  let i = 0\n  for (; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break }\n  }\n  if (i === HTML_SEQUENCES.length) { return false }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2]\n  }\n\n  let nextLine = startLine + 1\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine]\n      max = state.eMarks[nextLine]\n      lineText = state.src.slice(pos, max)\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++ }\n        break\n      }\n    }\n  }\n\n  state.line = nextLine\n\n  const token   = state.push('html_block', '', 0)\n  token.map     = [startLine, nextLine]\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true)\n\n  return true\n}\n", "// List of valid html blocks names, according to commonmark spec\n// https://spec.commonmark.org/0.30/#html-blocks\n\nexport default [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'source',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n", "// Regexps to match html elements\n\nconst attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*'\n\nconst unquoted      = '[^\"\\'=<>`\\\\x00-\\\\x20]+'\nconst single_quoted = \"'[^']*'\"\nconst double_quoted = '\"[^\"]*\"'\n\nconst attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')'\n\nconst attribute   = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)'\n\nconst open_tag    = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>'\n\nconst close_tag   = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>'\nconst comment     = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->'\nconst processing  = '<[?][\\\\s\\\\S]*?[?]>'\nconst declaration = '<![A-Z]+\\\\s+[^>]*>'\nconst cdata       = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>'\n\nconst HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +\n                        '|' + processing + '|' + declaration + '|' + cdata + ')')\nconst HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')')\n\nexport { HTML_TAG_RE, HTML_OPEN_CLOSE_TAG_RE }\n", "// heading (#, ##, ...)\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function heading (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  let ch  = state.src.charCodeAt(pos)\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false }\n\n  // count heading level\n  let level = 1\n  ch = state.src.charCodeAt(++pos)\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++\n    ch = state.src.charCodeAt(++pos)\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false }\n\n  if (silent) { return true }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos)\n  const tmp = state.skipCharsBack(max, 0x23, pos) // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp\n  }\n\n  state.line = startLine + 1\n\n  const token_o  = state.push('heading_open', 'h' + String(level), 1)\n  token_o.markup = '########'.slice(0, level)\n  token_o.map    = [startLine, state.line]\n\n  const token_i    = state.push('inline', '', 0)\n  token_i.content  = state.src.slice(pos, max).trim()\n  token_i.map      = [startLine, state.line]\n  token_i.children = []\n\n  const token_c  = state.push('heading_close', 'h' + String(level), -1)\n  token_c.markup = '########'.slice(0, level)\n\n  return true\n}\n", "// lheading (---, ===)\n\nexport default function lheading (state, startLine, endLine/*, silent */) {\n  const terminatorRules = state.md.block.ruler.getRules('paragraph')\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  const oldParentType = state.parentType\n  state.parentType = 'paragraph' // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  let level = 0\n  let marker\n  let nextLine = startLine + 1\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      let pos = state.bMarks[nextLine] + state.tShift[nextLine]\n      const max = state.eMarks[nextLine]\n\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos)\n\n        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {\n          pos = state.skipChars(pos, marker)\n          pos = state.skipSpaces(pos)\n\n          if (pos >= max) {\n            level = (marker === 0x3D/* = */ ? 1 : 2)\n            break\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue }\n\n    // Some tags can terminate paragraph without empty line.\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n    if (terminate) { break }\n  }\n\n  if (!level) {\n    // Didn't find valid underline\n    return false\n  }\n\n  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim()\n\n  state.line = nextLine + 1\n\n  const token_o    = state.push('heading_open', 'h' + String(level), 1)\n  token_o.markup   = String.fromCharCode(marker)\n  token_o.map      = [startLine, state.line]\n\n  const token_i    = state.push('inline', '', 0)\n  token_i.content  = content\n  token_i.map      = [startLine, state.line - 1]\n  token_i.children = []\n\n  const token_c    = state.push('heading_close', 'h' + String(level), -1)\n  token_c.markup   = String.fromCharCode(marker)\n\n  state.parentType = oldParentType\n\n  return true\n}\n", "// Paragraph\n\nexport default function paragraph (state, startLine, endLine) {\n  const terminatorRules = state.md.block.ruler.getRules('paragraph')\n  const oldParentType = state.parentType\n  let nextLine = startLine + 1\n  state.parentType = 'paragraph'\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue }\n\n    // Some tags can terminate paragraph without empty line.\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n    if (terminate) { break }\n  }\n\n  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim()\n\n  state.line = nextLine\n\n  const token_o    = state.push('paragraph_open', 'p', 1)\n  token_o.map      = [startLine, state.line]\n\n  const token_i    = state.push('inline', '', 0)\n  token_i.content  = content\n  token_i.map      = [startLine, state.line]\n  token_i.children = []\n\n  state.push('paragraph_close', 'p', -1)\n\n  state.parentType = oldParentType\n\n  return true\n}\n", "/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n\nimport Ruler from './ruler.mjs'\nimport StateInline from './rules_inline/state_inline.mjs'\n\nimport r_text from './rules_inline/text.mjs'\nimport r_linkify from './rules_inline/linkify.mjs'\nimport r_newline from './rules_inline/newline.mjs'\nimport r_escape from './rules_inline/escape.mjs'\nimport r_backticks from './rules_inline/backticks.mjs'\nimport r_strikethrough from './rules_inline/strikethrough.mjs'\nimport r_emphasis from './rules_inline/emphasis.mjs'\nimport r_link from './rules_inline/link.mjs'\nimport r_image from './rules_inline/image.mjs'\nimport r_autolink from './rules_inline/autolink.mjs'\nimport r_html_inline from './rules_inline/html_inline.mjs'\nimport r_entity from './rules_inline/entity.mjs'\n\nimport r_balance_pairs from './rules_inline/balance_pairs.mjs'\nimport r_fragments_join from './rules_inline/fragments_join.mjs'\n\n// Parser rules\n\nconst _rules = [\n  ['text',            r_text],\n  ['linkify',         r_linkify],\n  ['newline',         r_newline],\n  ['escape',          r_escape],\n  ['backticks',       r_backticks],\n  ['strikethrough',   r_strikethrough.tokenize],\n  ['emphasis',        r_emphasis.tokenize],\n  ['link',            r_link],\n  ['image',           r_image],\n  ['autolink',        r_autolink],\n  ['html_inline',     r_html_inline],\n  ['entity',          r_entity]\n]\n\n// `rule2` ruleset was created specifically for emphasis/strikethrough\n// post-processing and may be changed in the future.\n//\n// Don't use this for anything except pairs (plugins working with `balance_pairs`).\n//\nconst _rules2 = [\n  ['balance_pairs',   r_balance_pairs],\n  ['strikethrough',   r_strikethrough.postProcess],\n  ['emphasis',        r_emphasis.postProcess],\n  // rules for pairs separate '**' into its own text tokens, which may be left unused,\n  // rule below merges unused segments back with the rest of the text\n  ['fragments_join',  r_fragments_join]\n]\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline () {\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler()\n\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1])\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler()\n\n  for (let i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1])\n  }\n}\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  const pos = state.pos\n  const rules = this.ruler.getRules('')\n  const len = rules.length\n  const maxNesting = state.md.options.maxNesting\n  const cache = state.cache\n\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos]\n    return\n  }\n\n  let ok = false\n\n  if (state.level < maxNesting) {\n    for (let i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++\n      ok = rules[i](state, true)\n      state.level--\n\n      if (ok) {\n        if (pos >= state.pos) { throw new Error(\"inline rule didn't increment state.pos\") }\n        break\n      }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax\n  }\n\n  if (!ok) { state.pos++ }\n  cache[pos] = state.pos\n}\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  const rules = this.ruler.getRules('')\n  const len = rules.length\n  const end = state.posMax\n  const maxNesting = state.md.options.maxNesting\n\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n    const prevPos = state.pos\n    let ok = false\n\n    if (state.level < maxNesting) {\n      for (let i = 0; i < len; i++) {\n        ok = rules[i](state, false)\n        if (ok) {\n          if (prevPos >= state.pos) { throw new Error(\"inline rule didn't increment state.pos\") }\n          break\n        }\n      }\n    }\n\n    if (ok) {\n      if (state.pos >= end) { break }\n      continue\n    }\n\n    state.pending += state.src[state.pos++]\n  }\n\n  if (state.pending) {\n    state.pushPending()\n  }\n}\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  const state = new this.State(str, md, env, outTokens)\n\n  this.tokenize(state)\n\n  const rules = this.ruler2.getRules('')\n  const len = rules.length\n\n  for (let i = 0; i < len; i++) {\n    rules[i](state)\n  }\n}\n\nParserInline.prototype.State = StateInline\n\nexport default ParserInline\n", "// Inline parser state\n\nimport Token from '../token.mjs'\nimport { isWhiteSpace, isPunctChar, isMdAsciiPunct } from '../common/utils.mjs'\n\nfunction StateInline (src, md, env, outTokens) {\n  this.src = src\n  this.env = env\n  this.md = md\n  this.tokens = outTokens\n  this.tokens_meta = Array(outTokens.length)\n\n  this.pos = 0\n  this.posMax = this.src.length\n  this.level = 0\n  this.pending = ''\n  this.pendingLevel = 0\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {}\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = []\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = []\n\n  // backtick length => last seen position\n  this.backticks = {}\n  this.backticksScanned = false\n\n  // Counter used to disable inline linkify-it execution\n  // inside <a> and markdown links\n  this.linkLevel = 0\n}\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  const token = new Token('text', '', 0)\n  token.content = this.pending\n  token.level = this.pendingLevel\n  this.tokens.push(token)\n  this.pending = ''\n  return token\n}\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending()\n  }\n\n  const token = new Token(type, tag, nesting)\n  let token_meta = null\n\n  if (nesting < 0) {\n    // closing tag\n    this.level--\n    this.delimiters = this._prev_delimiters.pop()\n  }\n\n  token.level = this.level\n\n  if (nesting > 0) {\n    // opening tag\n    this.level++\n    this._prev_delimiters.push(this.delimiters)\n    this.delimiters = []\n    token_meta = { delimiters: this.delimiters }\n  }\n\n  this.pendingLevel = this.level\n  this.tokens.push(token)\n  this.tokens_meta.push(token_meta)\n  return token\n}\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  let can_open, can_close\n  let left_flanking = true\n  let right_flanking = true\n  const max = this.posMax\n  const marker = this.src.charCodeAt(start)\n\n  // treat beginning of the line as a whitespace\n  const lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20\n\n  let pos = start\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++ }\n\n  const count = pos - start\n\n  // treat end of the line as a whitespace\n  const nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20\n\n  const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar))\n  const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar))\n\n  const isLastWhiteSpace = isWhiteSpace(lastChar)\n  const isNextWhiteSpace = isWhiteSpace(nextChar)\n\n  if (isNextWhiteSpace) {\n    left_flanking = false\n  } else if (isNextPunctChar) {\n    if (!(isLastWhiteSpace || isLastPunctChar)) {\n      left_flanking = false\n    }\n  }\n\n  if (isLastWhiteSpace) {\n    right_flanking = false\n  } else if (isLastPunctChar) {\n    if (!(isNextWhiteSpace || isNextPunctChar)) {\n      right_flanking = false\n    }\n  }\n\n  if (!canSplitWord) {\n    can_open  = left_flanking  && (!right_flanking || isLastPunctChar)\n    can_close = right_flanking && (!left_flanking  || isNextPunctChar)\n  } else {\n    can_open  = left_flanking\n    can_close = right_flanking\n  }\n\n  return { can_open, can_close, length: count }\n}\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token\n\nexport default StateInline\n", "// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar (ch) {\n  switch (ch) {\n    case 0x0A/* \\n */:\n    case 0x21/* ! */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2D/* - */:\n    case 0x3A/* : */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true\n    default:\n      return false\n  }\n}\n\nexport default function text (state, silent) {\n  let pos = state.pos\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++\n  }\n\n  if (pos === state.pos) { return false }\n\n  if (!silent) { state.pending += state.src.slice(state.pos, pos) }\n\n  state.pos = pos\n\n  return true\n}\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParcerInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n}; */\n", "// Process links like https://example.org/\n\n// RFC3986: scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nconst SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i\n\nexport default function linkify (state, silent) {\n  if (!state.md.options.linkify) return false\n  if (state.linkLevel > 0) return false\n\n  const pos = state.pos\n  const max = state.posMax\n\n  if (pos + 3 > max) return false\n  if (state.src.charCodeAt(pos) !== 0x3A/* : */) return false\n  if (state.src.charCodeAt(pos + 1) !== 0x2F/* / */) return false\n  if (state.src.charCodeAt(pos + 2) !== 0x2F/* / */) return false\n\n  const match = state.pending.match(SCHEME_RE)\n  if (!match) return false\n\n  const proto = match[1]\n\n  const link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length))\n  if (!link) return false\n\n  let url = link.url\n\n  // invalid link, but still detected by linkify somehow;\n  // need to check to prevent infinite loop below\n  if (url.length <= proto.length) return false\n\n  // disallow '*' at the end of the link (conflicts with emphasis)\n  url = url.replace(/\\*+$/, '')\n\n  const fullUrl = state.md.normalizeLink(url)\n  if (!state.md.validateLink(fullUrl)) return false\n\n  if (!silent) {\n    state.pending = state.pending.slice(0, -proto.length)\n\n    const token_o = state.push('link_open', 'a', 1)\n    token_o.attrs = [['href', fullUrl]]\n    token_o.markup = 'linkify'\n    token_o.info = 'auto'\n\n    const token_t = state.push('text', '', 0)\n    token_t.content = state.md.normalizeLinkText(url)\n\n    const token_c = state.push('link_close', 'a', -1)\n    token_c.markup = 'linkify'\n    token_c.info = 'auto'\n  }\n\n  state.pos += url.length - proto.length\n  return true\n}\n", "// Proceess '\\n'\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function newline (state, silent) {\n  let pos = state.pos\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false }\n\n  const pmax = state.pending.length - 1\n  const max = state.posMax\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        // Find whitespaces tail of pending chars.\n        let ws = pmax - 1\n        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--\n\n        state.pending = state.pending.slice(0, ws)\n        state.push('hardbreak', 'br', 0)\n      } else {\n        state.pending = state.pending.slice(0, -1)\n        state.push('softbreak', 'br', 0)\n      }\n    } else {\n      state.push('softbreak', 'br', 0)\n    }\n  }\n\n  pos++\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++ }\n\n  state.pos = pos\n  return true\n}\n", "// Process escaped chars and hardbreaks\n\nimport { isSpace } from '../common/utils.mjs'\n\nconst ESCAPED = []\n\nfor (let i = 0; i < 256; i++) { ESCAPED.push(0) }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1 })\n\nexport default function escape (state, silent) {\n  let pos = state.pos\n  const max = state.posMax\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) return false\n  pos++\n\n  // '\\' at the end of the inline block\n  if (pos >= max) return false\n\n  let ch1 = state.src.charCodeAt(pos)\n\n  if (ch1 === 0x0A) {\n    if (!silent) {\n      state.push('hardbreak', 'br', 0)\n    }\n\n    pos++\n    // skip leading whitespaces from next line\n    while (pos < max) {\n      ch1 = state.src.charCodeAt(pos)\n      if (!isSpace(ch1)) break\n      pos++\n    }\n\n    state.pos = pos\n    return true\n  }\n\n  let escapedStr = state.src[pos]\n\n  if (ch1 >= 0xD800 && ch1 <= 0xDBFF && pos + 1 < max) {\n    const ch2 = state.src.charCodeAt(pos + 1)\n\n    if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {\n      escapedStr += state.src[pos + 1]\n      pos++\n    }\n  }\n\n  const origStr = '\\\\' + escapedStr\n\n  if (!silent) {\n    const token = state.push('text_special', '', 0)\n\n    if (ch1 < 256 && ESCAPED[ch1] !== 0) {\n      token.content = escapedStr\n    } else {\n      token.content = origStr\n    }\n\n    token.markup = origStr\n    token.info   = 'escape'\n  }\n\n  state.pos = pos + 1\n  return true\n}\n", "// Parse backticks\n\nexport default function backtick (state, silent) {\n  let pos = state.pos\n  const ch = state.src.charCodeAt(pos)\n\n  if (ch !== 0x60/* ` */) { return false }\n\n  const start = pos\n  pos++\n  const max = state.posMax\n\n  // scan marker length\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++ }\n\n  const marker = state.src.slice(start, pos)\n  const openerLength = marker.length\n\n  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n    if (!silent) state.pending += marker\n    state.pos += openerLength\n    return true\n  }\n\n  let matchEnd = pos\n  let matchStart\n\n  // Nothing found in the cache, scan until the end of the line (or until marker is found)\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1\n\n    // scan marker length\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++ }\n\n    const closerLength = matchEnd - matchStart\n\n    if (closerLength === openerLength) {\n      // Found matching closer length.\n      if (!silent) {\n        const token = state.push('code_inline', 'code', 0)\n        token.markup = marker\n        token.content = state.src.slice(pos, matchStart)\n          .replace(/\\n/g, ' ')\n          .replace(/^ (.+) $/, '$1')\n      }\n      state.pos = matchEnd\n      return true\n    }\n\n    // Some different length found, put it in cache as upper limit of where closer can be found\n    state.backticks[closerLength] = matchStart\n  }\n\n  // Scanned through the end, didn't find anything\n  state.backticksScanned = true\n\n  if (!silent) state.pending += marker\n  state.pos += openerLength\n  return true\n}\n", "// ~~strike through~~\n//\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nfunction strikethrough_tokenize (state, silent) {\n  const start = state.pos\n  const marker = state.src.charCodeAt(start)\n\n  if (silent) { return false }\n\n  if (marker !== 0x7E/* ~ */) { return false }\n\n  const scanned = state.scanDelims(state.pos, true)\n  let len = scanned.length\n  const ch = String.fromCharCode(marker)\n\n  if (len < 2) { return false }\n\n  let token\n\n  if (len % 2) {\n    token         = state.push('text', '', 0)\n    token.content = ch\n    len--\n  }\n\n  for (let i = 0; i < len; i += 2) {\n    token         = state.push('text', '', 0)\n    token.content = ch + ch\n\n    state.delimiters.push({\n      marker,\n      length: 0,     // disable \"rule of 3\" length checks meant for emphasis\n      token: state.tokens.length - 1,\n      end: -1,\n      open: scanned.can_open,\n      close: scanned.can_close\n    })\n  }\n\n  state.pos += scanned.length\n\n  return true\n}\n\nfunction postProcess (state, delimiters) {\n  let token\n  const loneMarkers = []\n  const max = delimiters.length\n\n  for (let i = 0; i < max; i++) {\n    const startDelim = delimiters[i]\n\n    if (startDelim.marker !== 0x7E/* ~ */) {\n      continue\n    }\n\n    if (startDelim.end === -1) {\n      continue\n    }\n\n    const endDelim = delimiters[startDelim.end]\n\n    token         = state.tokens[startDelim.token]\n    token.type    = 's_open'\n    token.tag     = 's'\n    token.nesting = 1\n    token.markup  = '~~'\n    token.content = ''\n\n    token         = state.tokens[endDelim.token]\n    token.type    = 's_close'\n    token.tag     = 's'\n    token.nesting = -1\n    token.markup  = '~~'\n    token.content = ''\n\n    if (state.tokens[endDelim.token - 1].type === 'text' &&\n        state.tokens[endDelim.token - 1].content === '~') {\n      loneMarkers.push(endDelim.token - 1)\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    const i = loneMarkers.pop()\n    let j = i + 1\n\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++\n    }\n\n    j--\n\n    if (i !== j) {\n      token = state.tokens[j]\n      state.tokens[j] = state.tokens[i]\n      state.tokens[i] = token\n    }\n  }\n}\n\n// Walk through delimiter list and replace text tokens with tags\n//\nfunction strikethrough_postProcess (state) {\n  const tokens_meta = state.tokens_meta\n  const max = state.tokens_meta.length\n\n  postProcess(state, state.delimiters)\n\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters)\n    }\n  }\n}\n\nexport default {\n  tokenize: strikethrough_tokenize,\n  postProcess: strikethrough_postProcess\n}\n", "// Process *this* and _that_\n//\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nfunction emphasis_tokenize (state, silent) {\n  const start = state.pos\n  const marker = state.src.charCodeAt(start)\n\n  if (silent) { return false }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false }\n\n  const scanned = state.scanDelims(state.pos, marker === 0x2A)\n\n  for (let i = 0; i < scanned.length; i++) {\n    const token = state.push('text', '', 0)\n    token.content = String.fromCharCode(marker)\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token: state.tokens.length - 1,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end: -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open: scanned.can_open,\n      close: scanned.can_close\n    })\n  }\n\n  state.pos += scanned.length\n\n  return true\n}\n\nfunction postProcess (state, delimiters) {\n  const max = delimiters.length\n\n  for (let i = max - 1; i >= 0; i--) {\n    const startDelim = delimiters[i]\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue\n    }\n\n    const endDelim = delimiters[startDelim.end]\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    const isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               // check that first two markers match and adjacent\n               delimiters[i - 1].marker === startDelim.marker &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               // check that last two markers are adjacent (we can safely assume they match)\n               delimiters[startDelim.end + 1].token === endDelim.token + 1\n\n    const ch = String.fromCharCode(startDelim.marker)\n\n    const token_o   = state.tokens[startDelim.token]\n    token_o.type    = isStrong ? 'strong_open' : 'em_open'\n    token_o.tag     = isStrong ? 'strong' : 'em'\n    token_o.nesting = 1\n    token_o.markup  = isStrong ? ch + ch : ch\n    token_o.content = ''\n\n    const token_c   = state.tokens[endDelim.token]\n    token_c.type    = isStrong ? 'strong_close' : 'em_close'\n    token_c.tag     = isStrong ? 'strong' : 'em'\n    token_c.nesting = -1\n    token_c.markup  = isStrong ? ch + ch : ch\n    token_c.content = ''\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = ''\n      state.tokens[delimiters[startDelim.end + 1].token].content = ''\n      i--\n    }\n  }\n}\n\n// Walk through delimiter list and replace text tokens with tags\n//\nfunction emphasis_post_process (state) {\n  const tokens_meta = state.tokens_meta\n  const max = state.tokens_meta.length\n\n  postProcess(state, state.delimiters)\n\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters)\n    }\n  }\n}\n\nexport default {\n  tokenize: emphasis_tokenize,\n  postProcess: emphasis_post_process\n}\n", "// Process [link](<to> \"stuff\")\n\nimport { normalizeReference, isSpace } from '../common/utils.mjs'\n\nexport default function link (state, silent) {\n  let code, label, res, ref\n  let href = ''\n  let title = ''\n  let start = state.pos\n  let parseReference = true\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false }\n\n  const oldPos = state.pos\n  const max = state.posMax\n  const labelStart = state.pos + 1\n  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true)\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false }\n\n  let pos = labelEnd + 1\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos)\n      if (!isSpace(code) && code !== 0x0A) { break }\n    }\n    if (pos >= max) { return false }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax)\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str)\n      if (state.md.validateLink(href)) {\n        pos = res.pos\n      } else {\n        href = ''\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n      start = pos\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos)\n        if (!isSpace(code) && code !== 0x0A) { break }\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax)\n      if (pos < max && start !== pos && res.ok) {\n        title = res.str\n        pos = res.pos\n\n        // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos)\n          if (!isSpace(code) && code !== 0x0A) { break }\n        }\n      }\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true\n    }\n    pos++\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1\n      pos = state.md.helpers.parseLinkLabel(state, pos)\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++)\n      } else {\n        pos = labelEnd + 1\n      }\n    } else {\n      pos = labelEnd + 1\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd) }\n\n    ref = state.env.references[normalizeReference(label)]\n    if (!ref) {\n      state.pos = oldPos\n      return false\n    }\n    href = ref.href\n    title = ref.title\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart\n    state.posMax = labelEnd\n\n    const token_o = state.push('link_open', 'a', 1)\n    const attrs = [['href', href]]\n    token_o.attrs  = attrs\n    if (title) {\n      attrs.push(['title', title])\n    }\n\n    state.linkLevel++\n    state.md.inline.tokenize(state)\n    state.linkLevel--\n\n    state.push('link_close', 'a', -1)\n  }\n\n  state.pos = pos\n  state.posMax = max\n  return true\n}\n", "// Process ![image](<src> \"title\")\n\nimport { normalizeReference, isSpace } from '../common/utils.mjs'\n\nexport default function image (state, silent) {\n  let code, content, label, pos, ref, res, title, start\n  let href = ''\n  const oldPos = state.pos\n  const max = state.posMax\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false }\n\n  const labelStart = state.pos + 2\n  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false)\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false }\n\n  pos = labelEnd + 1\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos)\n      if (!isSpace(code) && code !== 0x0A) { break }\n    }\n    if (pos >= max) { return false }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax)\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str)\n      if (state.md.validateLink(href)) {\n        pos = res.pos\n      } else {\n        href = ''\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos)\n      if (!isSpace(code) && code !== 0x0A) { break }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax)\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str\n      pos = res.pos\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos)\n        if (!isSpace(code) && code !== 0x0A) { break }\n      }\n    } else {\n      title = ''\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos\n      return false\n    }\n    pos++\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1\n      pos = state.md.helpers.parseLinkLabel(state, pos)\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++)\n      } else {\n        pos = labelEnd + 1\n      }\n    } else {\n      pos = labelEnd + 1\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd) }\n\n    ref = state.env.references[normalizeReference(label)]\n    if (!ref) {\n      state.pos = oldPos\n      return false\n    }\n    href = ref.href\n    title = ref.title\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd)\n\n    const tokens = []\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens\n    )\n\n    const token = state.push('image', 'img', 0)\n    const attrs = [['src', href], ['alt', '']]\n    token.attrs = attrs\n    token.children = tokens\n    token.content = content\n\n    if (title) {\n      attrs.push(['title', title])\n    }\n  }\n\n  state.pos = pos\n  state.posMax = max\n  return true\n}\n", "// Process autolinks '<protocol:...>'\n\n/* eslint max-len:0 */\nconst EMAIL_RE    = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/\n/* eslint-disable-next-line no-control-regex */\nconst AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\\x00-\\x20]*)$/\n\nexport default function autolink (state, silent) {\n  let pos = state.pos\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false }\n\n  const start = state.pos\n  const max = state.posMax\n\n  for (;;) {\n    if (++pos >= max) return false\n\n    const ch = state.src.charCodeAt(pos)\n\n    if (ch === 0x3C /* < */) return false\n    if (ch === 0x3E /* > */) break\n  }\n\n  const url = state.src.slice(start + 1, pos)\n\n  if (AUTOLINK_RE.test(url)) {\n    const fullUrl = state.md.normalizeLink(url)\n    if (!state.md.validateLink(fullUrl)) { return false }\n\n    if (!silent) {\n      const token_o   = state.push('link_open', 'a', 1)\n      token_o.attrs   = [['href', fullUrl]]\n      token_o.markup  = 'autolink'\n      token_o.info    = 'auto'\n\n      const token_t   = state.push('text', '', 0)\n      token_t.content = state.md.normalizeLinkText(url)\n\n      const token_c   = state.push('link_close', 'a', -1)\n      token_c.markup  = 'autolink'\n      token_c.info    = 'auto'\n    }\n\n    state.pos += url.length + 2\n    return true\n  }\n\n  if (EMAIL_RE.test(url)) {\n    const fullUrl = state.md.normalizeLink('mailto:' + url)\n    if (!state.md.validateLink(fullUrl)) { return false }\n\n    if (!silent) {\n      const token_o   = state.push('link_open', 'a', 1)\n      token_o.attrs   = [['href', fullUrl]]\n      token_o.markup  = 'autolink'\n      token_o.info    = 'auto'\n\n      const token_t   = state.push('text', '', 0)\n      token_t.content = state.md.normalizeLinkText(url)\n\n      const token_c   = state.push('link_close', 'a', -1)\n      token_c.markup  = 'autolink'\n      token_c.info    = 'auto'\n    }\n\n    state.pos += url.length + 2\n    return true\n  }\n\n  return false\n}\n", "// Process html tags\n\nimport { HTML_TAG_RE } from '../common/html_re.mjs'\n\nfunction isLinkOpen (str) {\n  return /^<a[>\\s]/i.test(str)\n}\nfunction isLinkClose (str) {\n  return /^<\\/a\\s*>/i.test(str)\n}\n\nfunction isLetter (ch) {\n  /* eslint no-bitwise:0 */\n  const lc = ch | 0x20 // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */)\n}\n\nexport default function html_inline (state, silent) {\n  if (!state.md.options.html) { return false }\n\n  // Check start\n  const max = state.posMax\n  const pos = state.pos\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||\n      pos + 2 >= max) {\n    return false\n  }\n\n  // Quick fail on second char\n  const ch = state.src.charCodeAt(pos + 1)\n  if (ch !== 0x21/* ! */ &&\n      ch !== 0x3F/* ? */ &&\n      ch !== 0x2F/* / */ &&\n      !isLetter(ch)) {\n    return false\n  }\n\n  const match = state.src.slice(pos).match(HTML_TAG_RE)\n  if (!match) { return false }\n\n  if (!silent) {\n    const token = state.push('html_inline', '', 0)\n    token.content = match[0]\n\n    if (isLinkOpen(token.content))  state.linkLevel++\n    if (isLinkClose(token.content)) state.linkLevel--\n  }\n  state.pos += match[0].length\n  return true\n}\n", "// Process html entity - &#123;, &#xAF;, &quot;, ...\n\nimport { decodeHTML } from 'entities'\nimport { isValidEntityCode, fromCodePoint } from '../common/utils.mjs'\n\nconst DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i\nconst NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i\n\nexport default function entity (state, silent) {\n  const pos = state.pos\n  const max = state.posMax\n\n  if (state.src.charCodeAt(pos) !== 0x26/* & */) return false\n\n  if (pos + 1 >= max) return false\n\n  const ch = state.src.charCodeAt(pos + 1)\n\n  if (ch === 0x23 /* # */) {\n    const match = state.src.slice(pos).match(DIGITAL_RE)\n    if (match) {\n      if (!silent) {\n        const code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10)\n\n        const token   = state.push('text_special', '', 0)\n        token.content = isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD)\n        token.markup  = match[0]\n        token.info    = 'entity'\n      }\n      state.pos += match[0].length\n      return true\n    }\n  } else {\n    const match = state.src.slice(pos).match(NAMED_RE)\n    if (match) {\n      const decoded = decodeHTML(match[0])\n      if (decoded !== match[0]) {\n        if (!silent) {\n          const token   = state.push('text_special', '', 0)\n          token.content = decoded\n          token.markup  = match[0]\n          token.info    = 'entity'\n        }\n        state.pos += match[0].length\n        return true\n      }\n    }\n  }\n\n  return false\n}\n", "// For each opening emphasis-like marker find a matching closing one\n//\n\nfunction processDelimiters (delimiters) {\n  const openersBottom = {}\n  const max = delimiters.length\n\n  if (!max) return\n\n  // headerIdx is the first delimiter of the current (where closer is) delimiter run\n  let headerIdx = 0\n  let lastTokenIdx = -2 // needs any value lower than -1\n  const jumps = []\n\n  for (let closerIdx = 0; closerIdx < max; closerIdx++) {\n    const closer = delimiters[closerIdx]\n\n    jumps.push(0)\n\n    // markers belong to same delimiter run if:\n    //  - they have adjacent tokens\n    //  - AND markers are the same\n    //\n    if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {\n      headerIdx = closerIdx\n    }\n\n    lastTokenIdx = closer.token\n\n    // Length is only used for emphasis-specific \"rule of 3\",\n    // if it's not defined (in strikethrough or 3rd party plugins),\n    // we can default it to 0 to disable those checks.\n    //\n    closer.length = closer.length || 0\n\n    if (!closer.close) continue\n\n    // Previously calculated lower bounds (previous fails)\n    // for each marker, each delimiter length modulo 3,\n    // and for whether this closer can be an opener;\n    // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460\n    /* eslint-disable-next-line no-prototype-builtins */\n    if (!openersBottom.hasOwnProperty(closer.marker)) {\n      openersBottom[closer.marker] = [-1, -1, -1, -1, -1, -1]\n    }\n\n    const minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length % 3)]\n\n    let openerIdx = headerIdx - jumps[headerIdx] - 1\n\n    let newMinOpenerIdx = openerIdx\n\n    for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {\n      const opener = delimiters[openerIdx]\n\n      if (opener.marker !== closer.marker) continue\n\n      if (opener.open && opener.end < 0) {\n        let isOddMatch = false\n\n        // from spec:\n        //\n        // If one of the delimiters can both open and close emphasis, then the\n        // sum of the lengths of the delimiter runs containing the opening and\n        // closing delimiters must not be a multiple of 3 unless both lengths\n        // are multiples of 3.\n        //\n        if (opener.close || closer.open) {\n          if ((opener.length + closer.length) % 3 === 0) {\n            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n              isOddMatch = true\n            }\n          }\n        }\n\n        if (!isOddMatch) {\n          // If previous delimiter cannot be an opener, we can safely skip\n          // the entire sequence in future checks. This is required to make\n          // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n          //\n          const lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open\n            ? jumps[openerIdx - 1] + 1\n            : 0\n\n          jumps[closerIdx] = closerIdx - openerIdx + lastJump\n          jumps[openerIdx] = lastJump\n\n          closer.open  = false\n          opener.end   = closerIdx\n          opener.close = false\n          newMinOpenerIdx = -1\n          // treat next token as start of run,\n          // it optimizes skips in **<...>**a**<...>** pathological case\n          lastTokenIdx = -2\n          break\n        }\n      }\n    }\n\n    if (newMinOpenerIdx !== -1) {\n      // If match for this delimiter run failed, we want to set lower bound for\n      // future lookups. This is required to make sure algorithm has linear\n      // complexity.\n      //\n      // See details here:\n      // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n      //\n      openersBottom[closer.marker][(closer.open ? 3 : 0) + ((closer.length || 0) % 3)] = newMinOpenerIdx\n    }\n  }\n}\n\nexport default function link_pairs (state) {\n  const tokens_meta = state.tokens_meta\n  const max = state.tokens_meta.length\n\n  processDelimiters(state.delimiters)\n\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      processDelimiters(tokens_meta[curr].delimiters)\n    }\n  }\n}\n", "// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n\nexport default function fragments_join (state) {\n  let curr, last\n  let level = 0\n  const tokens = state.tokens\n  const max = state.tokens.length\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level-- // closing tag\n    tokens[curr].level = level\n    if (tokens[curr].nesting > 0) level++ // opening tag\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr] }\n\n      last++\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last\n  }\n}\n", "import reFactory from './lib/re.mjs'\n\n//\n// Helpers\n//\n\n// Merge objects\n//\nfunction assign (obj /* from1, from2, from3, ... */) {\n  const sources = Array.prototype.slice.call(arguments, 1)\n\n  sources.forEach(function (source) {\n    if (!source) { return }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key]\n    })\n  })\n\n  return obj\n}\n\nfunction _class (obj) { return Object.prototype.toString.call(obj) }\nfunction isString (obj) { return _class(obj) === '[object String]' }\nfunction isObject (obj) { return _class(obj) === '[object Object]' }\nfunction isRegExp (obj) { return _class(obj) === '[object RegExp]' }\nfunction isFunction (obj) { return _class(obj) === '[object Function]' }\n\nfunction escapeRE (str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&') }\n\n//\n\nconst defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n}\n\nfunction isOptionsObj (obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    /* eslint-disable-next-line no-prototype-builtins */\n    return acc || defaultOptions.hasOwnProperty(k)\n  }, false)\n}\n\nconst defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos)\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http = new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        )\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length\n      }\n      return 0\n    }\n  },\n  'https:': 'http:',\n  'ftp:': 'http:',\n  '//': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos)\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http = new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        )\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0 }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0 }\n        return tail.match(self.re.no_http)[0].length\n      }\n      return 0\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos)\n\n      if (!self.re.mailto) {\n        self.re.mailto = new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        )\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length\n      }\n      return 0\n    }\n  }\n}\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\n/* eslint-disable-next-line max-len */\nconst tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]'\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nconst tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\u0440\u0444'.split('|')\n\nfunction resetScanCache (self) {\n  self.__index__ = -1\n  self.__text_cache__ = ''\n}\n\nfunction createValidator (re) {\n  return function (text, pos) {\n    const tail = text.slice(pos)\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length\n    }\n    return 0\n  }\n}\n\nfunction createNormalizer () {\n  return function (match, self) {\n    self.normalize(match)\n  }\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile (self) {\n  // Load & clone RE patterns.\n  const re = self.re = reFactory(self.__opts__)\n\n  // Define dynamic patterns\n  const tlds = self.__tlds__.slice()\n\n  self.onCompile()\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re)\n  }\n  tlds.push(re.src_xn)\n\n  re.src_tlds = tlds.join('|')\n\n  function untpl (tpl) { return tpl.replace('%TLDS%', re.src_tlds) }\n\n  re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), 'i')\n  re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), 'i')\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i')\n  re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), 'i')\n\n  //\n  // Compile each schema\n  //\n\n  const aliases = []\n\n  self.__compiled__ = {} // Reset compiled data\n\n  function schemaError (name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val)\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    const val = self.__schemas__[name]\n\n    // skip disabled methods\n    if (val === null) { return }\n\n    const compiled = { validate: null, link: null }\n\n    self.__compiled__[name] = compiled\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate)\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate\n      } else {\n        schemaError(name, val)\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer()\n      } else {\n        schemaError(name, val)\n      }\n\n      return\n    }\n\n    if (isString(val)) {\n      aliases.push(name)\n      return\n    }\n\n    schemaError(name, val)\n  })\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize\n  })\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() }\n\n  //\n  // Build schema condition\n  //\n  const slist = Object.keys(self.__compiled__)\n    .filter(function (name) {\n      // Filter disabled & fake schemas\n      return name.length > 0 && self.__compiled__[name]\n    })\n    .map(escapeRE)\n    .join('|')\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i')\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig')\n  self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i')\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  )\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self)\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match (self, shift) {\n  const start = self.__index__\n  const end = self.__last_index__\n  const text = self.__text_cache__.slice(start, end)\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema = self.__schema__.toLowerCase()\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index = start + shift\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw = text\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text = text\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url = text\n}\n\nfunction createMatch (self, shift) {\n  const match = new Match(self, shift)\n\n  self.__compiled__[match.schema].normalize(match, self)\n\n  return match\n}\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt (schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options)\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas\n      schemas = {}\n    }\n  }\n\n  this.__opts__ = assign({}, defaultOptions, options)\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__ = -1\n  this.__last_index__ = -1 // Next scan position\n  this.__schema__ = ''\n  this.__text_cache__ = ''\n\n  this.__schemas__ = assign({}, defaultSchemas, schemas)\n  this.__compiled__ = {}\n\n  this.__tlds__ = tlds_default\n  this.__tlds_replaced__ = false\n\n  this.re = {}\n\n  compile(this)\n}\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add (schema, definition) {\n  this.__schemas__[schema] = definition\n  compile(this)\n  return this\n}\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set (options) {\n  this.__opts__ = assign(this.__opts__, options)\n  return this\n}\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test (text) {\n  // Reset scan cache\n  this.__text_cache__ = text\n  this.__index__ = -1\n\n  if (!text.length) { return false }\n\n  let m, ml, me, len, shift, next, re, tld_pos, at_pos\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search\n    re.lastIndex = 0\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex)\n      if (len) {\n        this.__schema__ = m[2]\n        this.__index__ = m.index + m[1].length\n        this.__last_index__ = m.index + m[0].length + len\n        break\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test)\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n          shift = ml.index + ml[1].length\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__ = ''\n            this.__index__ = shift\n            this.__last_index__ = ml.index + ml[0].length\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@')\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n        shift = me.index + me[1].length\n        next = me.index + me[0].length\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__ = 'mailto:'\n          this.__index__ = shift\n          this.__last_index__ = next\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0\n}\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest (text) {\n  return this.re.pretest.test(text)\n}\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt (text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this)\n}\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match (text) {\n  const result = []\n  let shift = 0\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift))\n    shift = this.__last_index__\n  }\n\n  // Cut head if cache was used\n  let tail = shift ? text.slice(shift) : text\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift))\n\n    tail = tail.slice(this.__last_index__)\n    shift += this.__last_index__\n  }\n\n  if (result.length) {\n    return result\n  }\n\n  return null\n}\n\n/**\n * LinkifyIt#matchAtStart(text) -> Match|null\n *\n * Returns fully-formed (not fuzzy) link if it starts at the beginning\n * of the string, and null otherwise.\n **/\nLinkifyIt.prototype.matchAtStart = function matchAtStart (text) {\n  // Reset scan cache\n  this.__text_cache__ = text\n  this.__index__ = -1\n\n  if (!text.length) return null\n\n  const m = this.re.schema_at_start.exec(text)\n  if (!m) return null\n\n  const len = this.testSchemaAt(text, m[2], m[0].length)\n  if (!len) return null\n\n  this.__schema__ = m[2]\n  this.__index__ = m.index + m[1].length\n  this.__last_index__ = m.index + m[0].length + len\n\n  return createMatch(this, 0)\n}\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\u0440\u0444\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds (list, keepOld) {\n  list = Array.isArray(list) ? list : [list]\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice()\n    this.__tlds_replaced__ = true\n    compile(this)\n    return this\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n    .sort()\n    .filter(function (el, idx, arr) {\n      return el !== arr[idx - 1]\n    })\n    .reverse()\n\n  compile(this)\n  return this\n}\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize (match) {\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url\n  }\n}\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile () {\n}\n\nexport default LinkifyIt\n", "import { Any, Cc, Z, P } from 'uc.micro'\n\nexport default function (opts) {\n  const re = {}\n  opts = opts || {}\n\n  re.src_Any = Any.source\n  re.src_Cc = Cc.source\n  re.src_Z = Z.source\n  re.src_P = P.source\n\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n  re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join('|')\n\n  // \\p{\\Z\\Cc} (white spaces + control)\n  re.src_ZCc = [re.src_Z, re.src_Cc].join('|')\n\n  // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n  const text_separators = '[><\\uff5c]'\n\n  // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n  re.src_pseudo_letter = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')'\n  // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  re.src_ip4 =\n\n    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'\n\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n  re.src_auth = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?'\n\n  re.src_port =\n\n    '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?'\n\n  re.src_host_terminator =\n\n    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')' +\n    '(?!' + (opts['---'] ? '-(?!--)|' : '-|') + '_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))'\n\n  re.src_path =\n\n    '(?:' +\n      '[/?#]' +\n        '(?:' +\n          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-;]).|' +\n          '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' +\n          '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' +\n          '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' +\n          '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' +\n          \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\n\n          // allow `I'm_king` if no pair found\n          \"\\\\'(?=\" + re.src_pseudo_letter + '|[-])|' +\n\n          // google has many dots in \"google search\" links (#66, #81).\n          // github has ... in commit range links,\n          // Restrict to\n          // - english\n          // - percent-encoded\n          // - parts of file path\n          // - params separator\n          // until more examples found.\n          '\\\\.{2,}[a-zA-Z0-9%/&]|' +\n\n          '\\\\.(?!' + re.src_ZCc + '|[.]|$)|' +\n          (opts['---']\n            ? '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n            : '\\\\-+|'\n          ) +\n          // allow `,,,` in paths\n          ',(?!' + re.src_ZCc + '|$)|' +\n\n          // allow `;` if not followed by space-like char\n          ';(?!' + re.src_ZCc + '|$)|' +\n\n          // allow `!!!` in paths, but not at the end\n          '\\\\!+(?!' + re.src_ZCc + '|[!]|$)|' +\n\n          '\\\\?(?!' + re.src_ZCc + '|[?]|$)' +\n        ')+' +\n      '|\\\\/' +\n    ')?'\n\n  // Allow anything in markdown spec, forbid quote (\") at the first position\n  // because emails enclosed in quotes are far more common\n  re.src_email_name =\n\n    '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*'\n\n  re.src_xn =\n\n    'xn--[a-z0-9\\\\-]{1,59}'\n\n  // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root =\n\n    // Allow letters & digits (http://test1)\n    '(?:' +\n      re.src_xn +\n      '|' +\n      re.src_pseudo_letter + '{1,63}' +\n    ')'\n\n  re.src_domain =\n\n    '(?:' +\n      re.src_xn +\n      '|' +\n      '(?:' + re.src_pseudo_letter + ')' +\n      '|' +\n      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +\n    ')'\n\n  re.src_host =\n\n    '(?:' +\n    // Don't need IP check, because digits are already allowed in normal domain names\n    //   src_ip4 +\n    // '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain/* _root */ + ')' +\n    ')'\n\n  re.tpl_host_fuzzy =\n\n    '(?:' +\n      re.src_ip4 +\n    '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' +\n    ')'\n\n  re.tpl_host_no_ip_fuzzy =\n\n    '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))'\n\n  re.src_host_strict =\n\n    re.src_host + re.src_host_terminator\n\n  re.tpl_host_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_host_terminator\n\n  re.src_host_port_strict =\n\n    re.src_host + re.src_port + re.src_host_terminator\n\n  re.tpl_host_port_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator\n\n  re.tpl_host_port_no_ip_fuzzy_strict =\n\n    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator\n\n  //\n  // Main rules\n  //\n\n  // Rude test fuzzy links by host, for quick deny\n  re.tpl_host_fuzzy_test =\n\n    'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))'\n\n  re.tpl_email_fuzzy =\n\n      '(^|' + text_separators + '|\"|\\\\(|' + re.src_ZCc + ')' +\n      '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')'\n\n  re.tpl_link_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')'\n\n  re.tpl_link_no_ip_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')'\n\n  return re\n}\n", "'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, callback) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = callback(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(domain, callback) {\n\tconst parts = domain.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tdomain = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tdomain = domain.replace(regexSeparators, '\\x2E');\n\tconst labels = domain.split('.');\n\tconst encoded = map(labels, callback).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = codePoints => String.fromCodePoint(...codePoints);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint >= 0x30 && codePoint < 0x3A) {\n\t\treturn 26 + (codePoint - 0x30);\n\t}\n\tif (codePoint >= 0x41 && codePoint < 0x5B) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint >= 0x61 && codePoint < 0x7B) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tconst oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\t\t\tif (digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tconst inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tconst basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue === n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.3.1',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;\n", "// markdown-it default options\n\nexport default {\n  options: {\n    // Enable HTML tags in source\n    html: false,\n\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: false,\n\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n\n    // autoconvert URL-like texts to links\n    linkify: false,\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '\u00AB\u00BB\u201E\u201C' for Russian, '\u201E\u201C\u201A\u2018' for German,\n    // and ['\u00AB\\xA0', '\\xA0\u00BB', '\u2039\\xA0', '\\xA0\u203A'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* \u201C\u201D\u2018\u2019 */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    // Internal protection, recursion limit\n    maxNesting: 100\n  },\n\n  components: {\n    core: {},\n    block: {},\n    inline: {}\n  }\n}\n", "// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\nexport default {\n  options: {\n    // Enable HTML tags in source\n    html: false,\n\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: false,\n\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n\n    // autoconvert URL-like texts to links\n    linkify: false,\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '\u00AB\u00BB\u201E\u201C' for Russian, '\u201E\u201C\u201A\u2018' for German,\n    // and ['\u00AB\\xA0', '\\xA0\u00BB', '\u2039\\xA0', '\\xA0\u203A'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* \u201C\u201D\u2018\u2019 */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    // Internal protection, recursion limit\n    maxNesting: 20\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline',\n        'text_join'\n      ]\n    },\n\n    block: {\n      rules: [\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'fragments_join'\n      ]\n    }\n  }\n}\n", "// Commonmark default options\n\nexport default {\n  options: {\n    // Enable HTML tags in source\n    html: true,\n\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: true,\n\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n\n    // autoconvert URL-like texts to links\n    linkify: false,\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '\u00AB\u00BB\u201E\u201C' for Russian, '\u201E\u201C\u201A\u2018' for German,\n    // and ['\u00AB\\xA0', '\\xA0\u00BB', '\u2039\\xA0', '\\xA0\u203A'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* \u201C\u201D\u2018\u2019 */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    // Internal protection, recursion limit\n    maxNesting: 20\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline',\n        'text_join'\n      ]\n    },\n\n    block: {\n      rules: [\n        'blockquote',\n        'code',\n        'fence',\n        'heading',\n        'hr',\n        'html_block',\n        'lheading',\n        'list',\n        'reference',\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'link',\n        'newline',\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'emphasis',\n        'fragments_join'\n      ]\n    }\n  }\n}\n"],
  "mappings": "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AC,GAAE,YAAW,CAAC,GAAE,YAAW,CAAC,GAAE,WAAU,CAAC,GAAE,gBAAe,CAAC,GAAE,YAAW,CAAC,GAAE,WAAU,CAAC,GAAE,WAAU,CAAC,GAAE,YAAW,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,YAAW,CAAC,GAAE,aAAY,CAAC,GAAE,WAAU,CAAC,GAAE,YAAW,CAAC,GAAE,YAAW,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,YAAW,CAAC,GAAE,WAAU,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,YAAW,CAAC,GAAE,WAAU,CAAC,GAAE,UAAS,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,YAAW,CAAC,GAAE,aAAY,CAAC,GAAE,WAAU,CAAC,GAAE,YAAW,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,YAAW,CAAC,GAAE,WAAU,CAAC,GAAE,aAAY,CAAC,GAAE,YAAW,CAAC,GAAE,YAAW,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,YAAW,CAAC,GAAE,aAAY,CAAC,GAAE,WAAU,CAAC,GAAE,YAAW,CAAC,GAAE,YAAW,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,YAAW,CAAC,GAAE,WAAU,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,YAAW,CAAC,GAAE,WAAU,CAAC,GAAE,UAAS,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,YAAW,CAAC,GAAE,aAAY,CAAC,GAAE,WAAU,CAAC,GAAE,UAAS,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,YAAW,CAAC,GAAE,WAAU,CAAC,GAAE,aAAY,CAAC,GAAE,YAAW,CAAC,GAAE,WAAU,CAAC,GAAE,YAAW,CAAC,GAAE,YAAW,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,YAAW,CAAC,GAAE,YAAW,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,YAAW,CAAC,GAAE,YAAW,CAAC,GAAE,WAAU,CAAC,GAAE,WAAU,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,YAAW,CAAC,GAAE,YAAW,CAAC,GAAE,WAAU,CAAC,GAAE,WAAU,CAAC,GAAE,YAAW,CAAC,GAAE,YAAW,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,YAAW,CAAC,GAAE,YAAW,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,WAAU,CAAC,GAAE,WAAU,CAAC,GAAE,aAAY,CAAC,GAAE,YAAW,CAAC,GAAE,YAAW,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,YAAW,CAAC,GAAE,YAAW,CAAC,GAAE,YAAW,CAAC,GAAE,YAAW,CAAC,GAAE,WAAU,CAAC,GAAE,YAAW,CAAC,GAAE,YAAW,CAAC,GAAE,YAAW,CAAC,GAAE,YAAW,CAAC,GAAE,YAAW,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,YAAW,CAAC,GAAE,UAAS,CAAC,GAAE,UAAS,CAAC,GAAE,YAAW,CAAC,GAAE,YAAW,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,YAAW,CAAC,GAAE,YAAW,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,CAAC,GAAE,aAAY,C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",
  "names": []
}

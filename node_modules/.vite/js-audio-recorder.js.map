{
  "version": 3,
  "sources": ["../js-audio-recorder/dist/webpack:/[name]/webpack/universalModuleDefinition", "../js-audio-recorder/dist/webpack:/[name]/webpack/bootstrap", "../js-audio-recorder/dist/webpack:/[name]/src/transform/transform.ts", "../js-audio-recorder/dist/webpack:/[name]/src/index.ts", "../js-audio-recorder/dist/webpack:/[name]/src/download/download.ts", "../js-audio-recorder/dist/webpack:/[name]/src/player/player.ts", "../js-audio-recorder/dist/webpack:/[name]/src/exception/exception.ts", "../js-audio-recorder/dist/webpack:/[name]/src/recorder/recorder.ts", "../js-audio-recorder/index.js", "dep:js-audio-recorder"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Recorder\"] = factory();\n\telse\n\t\troot[\"Recorder\"] = factory();\n})(this, function() {\nreturn ", " \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n", "interface dataview {\r\n    byteLength: number,\r\n    buffer: {\r\n        byteLength: number,\r\n    },\r\n    getUint8: any,\r\n}\r\n\r\n/**\r\n * \u5728data\u4E2D\u7684offset\u4F4D\u7F6E\u5F00\u59CB\u5199\u5165str\u5B57\u7B26\u4E32\r\n * @param {TypedArrays} data    \u4E8C\u8FDB\u5236\u6570\u636E\r\n * @param {Number}      offset  \u504F\u79FB\u91CF\r\n * @param {String}      str     \u5B57\u7B26\u4E32\r\n */\r\nfunction writeString(data, offset, str): void {\r\n    for (let i = 0; i < str.length; i++) {\r\n        data.setUint8(offset + i, str.charCodeAt(i));\r\n    }\r\n}\r\n\r\n/**\r\n * \u6570\u636E\u5408\u5E76\u538B\u7F29\r\n * \u6839\u636E\u8F93\u5165\u548C\u8F93\u51FA\u7684\u91C7\u6837\u7387\u538B\u7F29\u6570\u636E\uFF0C\r\n * \u6BD4\u5982\u8F93\u5165\u7684\u91C7\u6837\u7387\u662F48k\u7684\uFF0C\u6211\u4EEC\u9700\u8981\u7684\u662F\uFF08\u8F93\u51FA\uFF09\u7684\u662F16k\u7684\uFF0C\u7531\u4E8E48k\u4E0E16k\u662F3\u500D\u5173\u7CFB\uFF0C\r\n * \u6240\u4EE5\u8F93\u5165\u6570\u636E\u4E2D\u6BCF\u96943\u53D61\u4F4D\r\n *\r\n * @param {float32array} data       [-1, 1]\u7684pcm\u6570\u636E\r\n * @param {number} inputSampleRate  \u8F93\u5165\u91C7\u6837\u7387\r\n * @param {number} outputSampleRate \u8F93\u51FA\u91C7\u6837\u7387\r\n * @returns  {float32array}         \u538B\u7F29\u5904\u7406\u540E\u7684\u4E8C\u8FDB\u5236\u6570\u636E\r\n */\r\nexport function compress(data, inputSampleRate: number, outputSampleRate: number) {\r\n    // \u538B\u7F29\uFF0C\u6839\u636E\u91C7\u6837\u7387\u8FDB\u884C\u538B\u7F29\r\n    let rate = inputSampleRate / outputSampleRate,\r\n        compression = Math.max(rate, 1),\r\n        lData = data.left,\r\n        rData = data.right,\r\n        length = Math.floor(( lData.length + rData.length ) / rate),\r\n        result = new Float32Array(length),\r\n        index = 0,\r\n        j = 0;\r\n\r\n    // \u5FAA\u73AF\u95F4\u9694 compression \u4F4D\u53D6\u4E00\u4F4D\u6570\u636E\r\n    while (index < length) {\r\n        // \u53D6\u6574\u662F\u56E0\u4E3A\u5B58\u5728\u6BD4\u4F8Bcompression\u4E0D\u662F\u6574\u6570\u7684\u60C5\u51B5\r\n        let temp = Math.floor(j);\r\n\r\n        result[index] = lData[temp];\r\n        index++;\r\n\r\n        if (rData.length) {\r\n            /*\r\n            * \u53CC\u58F0\u9053\u5904\u7406\r\n            * e.inputBuffer.getChannelData(0)\u5F97\u5230\u4E86\u5DE6\u58F0\u90534096\u4E2A\u6837\u672C\u6570\u636E\uFF0C1\u662F\u53F3\u58F0\u9053\u7684\u6570\u636E\uFF0C\r\n            * \u6B64\u5904\u9700\u8981\u7EC4\u548C\u6210LRLRLR\u8FD9\u79CD\u683C\u5F0F\uFF0C\u624D\u80FD\u6B63\u5E38\u64AD\u653E\uFF0C\u6240\u4EE5\u8981\u5904\u7406\u4E0B\r\n            */\r\n            result[index] = rData[temp];\r\n            index++;\r\n        }\r\n\r\n        j += compression;\r\n    }\r\n    // \u8FD4\u56DE\u538B\u7F29\u540E\u7684\u4E00\u7EF4\u6570\u636E\r\n    return result;\r\n}\r\n\r\n/**\r\n * \u8F6C\u6362\u5230\u6211\u4EEC\u9700\u8981\u7684\u5BF9\u5E94\u683C\u5F0F\u7684\u7F16\u7801\r\n *\r\n * @param {float32array} bytes      pcm\u4E8C\u8FDB\u5236\u6570\u636E\r\n * @param {number}  sampleBits      \u91C7\u6837\u4F4D\u6570\r\n * @param {boolean} littleEdian     \u662F\u5426\u662F\u5C0F\u7AEF\u5B57\u8282\u5E8F\r\n * @returns {dataview}              pcm\u4E8C\u8FDB\u5236\u6570\u636E\r\n */\r\nexport function encodePCM(bytes, sampleBits: number, littleEdian: boolean = true) {\r\n    let offset = 0,\r\n        dataLength = bytes.length * (sampleBits / 8),\r\n        buffer = new ArrayBuffer(dataLength),\r\n        data = new DataView(buffer);\r\n\r\n    // \u5199\u5165\u91C7\u6837\u6570\u636E\r\n    if (sampleBits === 8) {\r\n        for (let i = 0; i < bytes.length; i++, offset++) {\r\n            // \u8303\u56F4[-1, 1]\r\n            let s = Math.max(-1, Math.min(1, bytes[i]));\r\n            // 8\u4F4D\u91C7\u6837\u4F4D\u5212\u5206\u62102^8=256\u4EFD\uFF0C\u5B83\u7684\u8303\u56F4\u662F0-255;\r\n            // \u5BF9\u4E8E8\u4F4D\u7684\u8BDD\uFF0C\u8D1F\u6570*128\uFF0C\u6B63\u6570*127\uFF0C\u7136\u540E\u6574\u4F53\u5411\u4E0A\u5E73\u79FB128(+128)\uFF0C\u5373\u53EF\u5F97\u5230[0,255]\u8303\u56F4\u7684\u6570\u636E\u3002\r\n            let val = s < 0 ? s * 128 : s * 127;\r\n            val = +val + 128;\r\n            data.setInt8(offset, val);\r\n        }\r\n    } else {\r\n        for (let i = 0; i < bytes.length; i++, offset += 2) {\r\n            let s = Math.max(-1, Math.min(1, bytes[i]));\r\n            // 16\u4F4D\u7684\u5212\u5206\u7684\u662F2^16=65536\u4EFD\uFF0C\u8303\u56F4\u662F-32768\u523032767\r\n            // \u56E0\u4E3A\u6211\u4EEC\u6536\u96C6\u7684\u6570\u636E\u8303\u56F4\u5728[-1,1]\uFF0C\u90A3\u4E48\u4F60\u60F3\u8F6C\u6362\u621016\u4F4D\u7684\u8BDD\uFF0C\u53EA\u9700\u8981\u5BF9\u8D1F\u6570*32768,\u5BF9\u6B63\u6570*32767,\u5373\u53EF\u5F97\u5230\u8303\u56F4\u5728[-32768,32767]\u7684\u6570\u636E\u3002\r\n            data.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, littleEdian);\r\n        }\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\n/**\r\n * \u7F16\u7801wav\uFF0C\u4E00\u822Cwav\u683C\u5F0F\u662F\u5728pcm\u6587\u4EF6\u524D\u589E\u52A044\u4E2A\u5B57\u8282\u7684\u6587\u4EF6\u5934\uFF0C\r\n * \u6240\u4EE5\uFF0C\u6B64\u5904\u53EA\u9700\u8981\u5728pcm\u6570\u636E\u524D\u589E\u52A0\u4E0B\u5C31\u884C\u4E86\u3002\r\n *\r\n * @param {DataView} bytes           pcm\u4E8C\u8FDB\u5236\u6570\u636E\r\n * @param {number}  inputSampleRate  \u8F93\u5165\u91C7\u6837\u7387\r\n * @param {number}  outputSampleRate \u8F93\u51FA\u91C7\u6837\u7387\r\n * @param {number}  numChannels      \u58F0\u9053\u6570\r\n * @param {number}  oututSampleBits  \u8F93\u51FA\u91C7\u6837\u4F4D\u6570\r\n * @param {boolean} littleEdian      \u662F\u5426\u662F\u5C0F\u7AEF\u5B57\u8282\u5E8F\r\n * @returns {DataView}               wav\u4E8C\u8FDB\u5236\u6570\u636E\r\n */\r\nexport function encodeWAV(bytes: dataview, inputSampleRate: number, outputSampleRate: number, numChannels: number, oututSampleBits: number, littleEdian: boolean = true) {\r\n    let sampleRate = outputSampleRate > inputSampleRate ? inputSampleRate : outputSampleRate,   // \u8F93\u51FA\u91C7\u6837\u7387\u8F83\u5927\u65F6\uFF0C\u4ECD\u4F7F\u7528\u8F93\u5165\u7684\u503C\uFF0C\r\n        sampleBits = oututSampleBits,\r\n        buffer = new ArrayBuffer(44 + bytes.byteLength),\r\n        data = new DataView(buffer),\r\n        channelCount = numChannels, // \u58F0\u9053\r\n        offset = 0;\r\n\r\n    // \u8D44\u6E90\u4EA4\u6362\u6587\u4EF6\u6807\u8BC6\u7B26\r\n    writeString(data, offset, 'RIFF'); offset += 4;\r\n    // \u4E0B\u4E2A\u5730\u5740\u5F00\u59CB\u5230\u6587\u4EF6\u5C3E\u603B\u5B57\u8282\u6570,\u5373\u6587\u4EF6\u5927\u5C0F-8\r\n    data.setUint32(offset, 36 + bytes.byteLength, littleEdian); offset += 4;\r\n    // WAV\u6587\u4EF6\u6807\u5FD7\r\n    writeString(data, offset, 'WAVE'); offset += 4;\r\n    // \u6CE2\u5F62\u683C\u5F0F\u6807\u5FD7\r\n    writeString(data, offset, 'fmt '); offset += 4;\r\n    // \u8FC7\u6EE4\u5B57\u8282,\u4E00\u822C\u4E3A 0x10 = 16\r\n    data.setUint32(offset, 16, littleEdian); offset += 4;\r\n    // \u683C\u5F0F\u7C7B\u522B (PCM\u5F62\u5F0F\u91C7\u6837\u6570\u636E)\r\n    data.setUint16(offset, 1, littleEdian); offset += 2;\r\n    // \u58F0\u9053\u6570\r\n    data.setUint16(offset, channelCount, littleEdian); offset += 2;\r\n    // \u91C7\u6837\u7387,\u6BCF\u79D2\u6837\u672C\u6570,\u8868\u793A\u6BCF\u4E2A\u901A\u9053\u7684\u64AD\u653E\u901F\u5EA6\r\n    data.setUint32(offset, sampleRate, littleEdian); offset += 4;\r\n    // \u6CE2\u5F62\u6570\u636E\u4F20\u8F93\u7387 (\u6BCF\u79D2\u5E73\u5747\u5B57\u8282\u6570) \u58F0\u9053\u6570 \u00D7 \u91C7\u6837\u9891\u7387 \u00D7 \u91C7\u6837\u4F4D\u6570 / 8\r\n    data.setUint32(offset, channelCount * sampleRate * (sampleBits / 8), littleEdian); offset += 4;\r\n    // \u5FEB\u6570\u636E\u8C03\u6574\u6570 \u91C7\u6837\u4E00\u6B21\u5360\u7528\u5B57\u8282\u6570 \u58F0\u9053\u6570 \u00D7 \u91C7\u6837\u4F4D\u6570 / 8\r\n    data.setUint16(offset, channelCount * (sampleBits / 8), littleEdian); offset += 2;\r\n    // \u91C7\u6837\u4F4D\u6570\r\n    data.setUint16(offset, sampleBits, littleEdian); offset += 2;\r\n    // \u6570\u636E\u6807\u8BC6\u7B26\r\n    writeString(data, offset, 'data'); offset += 4;\r\n    // \u91C7\u6837\u6570\u636E\u603B\u6570,\u5373\u6570\u636E\u603B\u5927\u5C0F-44\r\n    data.setUint32(offset, bytes.byteLength, littleEdian); offset += 4;\r\n\r\n    // \u7ED9wav\u5934\u589E\u52A0pcm\u4F53\r\n    for (let i = 0; i < bytes.byteLength;) {\r\n        data.setUint8(offset, bytes.getUint8(i));\r\n        offset++;\r\n        i++;\r\n    }\r\n\r\n    return data;\r\n}\r\n", "import { downloadPCM, downloadWAV, download } from './download/download';\r\nimport { compress, encodePCM, encodeWAV } from './transform/transform';\r\nimport Player from './player/player';\r\nimport Recorder from './recorder/recorder';\r\n\r\ndeclare let window: any;\r\ndeclare let Math: any;\r\ndeclare let navigator: any;\r\ndeclare let Promise: any;\r\n\r\n// \u6784\u9020\u51FD\u6570\u53C2\u6570\u683C\u5F0F\r\ninterface recorderConfig {\r\n    sampleBits?: number,        // \u91C7\u6837\u4F4D\u6570\r\n    sampleRate?: number,        // \u91C7\u6837\u7387\r\n    numChannels?: number,       // \u58F0\u9053\u6570\r\n    compiling?: boolean,        // \u662F\u5426\u8FB9\u5F55\u8FB9\u64AD\r\n}\r\n\r\nclass Index extends Recorder {\r\n    private isrecording: boolean = false;       // \u662F\u5426\u6B63\u5728\u5F55\u97F3\r\n    private ispause: boolean = false;           // \u662F\u5426\u662F\u6682\u505C\r\n    private isplaying: boolean = false;         // \u662F\u5426\u6B63\u5728\u64AD\u653E\r\n\r\n    public onplay: () => void;                  // \u97F3\u9891\u64AD\u653E\u56DE\u8C03\r\n    public onpauseplay: () => void;             // \u97F3\u9891\u6682\u505C\u56DE\u8C03\r\n    public onresumeplay: () => void;            // \u97F3\u9891\u6062\u590D\u64AD\u653E\u56DE\u8C03\r\n    public onstopplay: () => void;              // \u97F3\u9891\u505C\u6B62\u64AD\u653E\u56DE\u8C03\r\n    public onplayend: () => void;               // \u97F3\u9891\u6B63\u5E38\u64AD\u653E\u7ED3\u675F\r\n    /**\r\n     * @param {Object} options \u5305\u542B\u4EE5\u4E0B\u4E09\u4E2A\u53C2\u6570\uFF1A\r\n     * sampleBits\uFF0C\u91C7\u6837\u4F4D\u6570\uFF0C\u4E00\u822C8,16\uFF0C\u9ED8\u8BA416\r\n     * sampleRate\uFF0C\u91C7\u6837\u7387\uFF0C\u4E00\u822C 11025\u300116000\u300122050\u300124000\u300144100\u300148000\uFF0C\u9ED8\u8BA4\u4E3A\u6D4F\u89C8\u5668\u81EA\u5E26\u7684\u91C7\u6837\u7387\r\n     * numChannels\uFF0C\u58F0\u9053\uFF0C1\u62162\r\n     */\r\n    constructor(options: recorderConfig = {}) {\r\n        super(options);\r\n    }\r\n\r\n    /**\r\n     * \u91CD\u65B0\u4FEE\u6539\u914D\u7F6E\r\n     *\r\n     * @param {recorderConfig} [options={}]\r\n     * @memberof Recorder\r\n     */\r\n    public setOption(options: recorderConfig = {}) {\r\n        this.setNewOption(options);\r\n    }\r\n\r\n    /**\r\n     * Start the recording\r\n     */\r\n    start(): Promise<{}> {\r\n        if (this.isrecording) {\r\n            // \u6B63\u5728\u5F55\u97F3\uFF0C\u5219\u4E0D\u5141\u8BB8\r\n            return Promise.reject();\r\n        }\r\n\r\n        this.isrecording = true;\r\n\r\n        return this.startRecord();\r\n    }\r\n\r\n    /**\r\n     * Pause the recording\r\n     */\r\n    pause(): void {\r\n        if (this.isrecording && !this.ispause) {\r\n            this.ispause = true;\r\n            // \u5F53\u524D\u4E0D\u6682\u505C\u7684\u65F6\u5019\u624D\u53EF\u4EE5\u6682\u505C\r\n            this.pauseRecord();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u7EE7\u7EED\u5F55\u97F3\r\n     */\r\n    resume(): void {\r\n        if (this.isrecording && this.ispause) {\r\n            this.ispause = false;\r\n            this.resumeRecord();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u505C\u6B62\u5F55\u97F3\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    stop(): void {\r\n        if (this.isrecording) {\r\n            this.isrecording = false;\r\n            this.ispause = false;\r\n            this.stopRecord();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u64AD\u653E\u5F55\u97F3\r\n     */\r\n    play(): void {\r\n        this.stop();\r\n        // \u5173\u95ED\u524D\u4E00\u6B21\u97F3\u9891\u64AD\u653E\r\n        this.isplaying = true;\r\n\r\n        this.onplay && this.onplay();\r\n        Player.addPlayEnd(this.onplayend);  // \u6CE8\u518C\u64AD\u653E\u5B8C\u6210\u540E\u7684\u56DE\u8C03\u4E8B\u4EF6\r\n\r\n        const dataV = this.getWAV();\r\n\r\n        if (dataV.byteLength > 44) {\r\n            Player.play(dataV.buffer);  // \u64AD\u653E\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6\u5DF2\u7ECF\u64AD\u653E\u4E86\u591A\u957F\u65F6\u95F4\r\n     */\r\n    getPlayTime(): number {\r\n        return Player.getPlayTime();\r\n    }\r\n\r\n    /**\r\n     * \u6682\u505C\u64AD\u653E\u5F55\u97F3\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    pausePlay(): void {\r\n        if (this.isrecording || !this.isplaying) {\r\n            // \u6B63\u5728\u5F55\u97F3\u6216\u6CA1\u6709\u64AD\u653E\uFF0C\u6682\u505C\u65E0\u6548\r\n            return;\r\n        }\r\n\r\n        this.isplaying = false;\r\n        this.onpauseplay && this.onpauseplay();\r\n        Player.pausePlay();\r\n    }\r\n\r\n    /**\r\n     * \u6062\u590D\u64AD\u653E\u5F55\u97F3\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    resumePlay(): void {\r\n        if (this.isrecording || this.isplaying) {\r\n            // \u6B63\u5728\u5F55\u97F3\u6216\u5DF2\u7ECF\u64AD\u653E\u6216\u6CA1\u5F00\u59CB\u64AD\u653E\uFF0C\u6062\u590D\u65E0\u6548\r\n            return;\r\n        }\r\n\r\n        this.isplaying = true;\r\n        this.onresumeplay && this.onresumeplay();\r\n        Player.resumePlay();\r\n    }\r\n\r\n    /**\r\n     * \u505C\u6B62\u64AD\u653E\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    stopPlay(): void {\r\n        if (this.isrecording) {\r\n            // \u6B63\u5728\u5F55\u97F3\uFF0C\u505C\u6B62\u5F55\u97F3\u64AD\u653E\u65E0\u6548\r\n            return;\r\n        }\r\n\r\n        this.isplaying = false;\r\n        this.onstopplay && this.onstopplay();\r\n        Player.stopPlay();\r\n    }\r\n\r\n    destroy(): Promise<{}> {\r\n        Player.destroyPlay();\r\n\r\n        return this.destroyRecord();\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6\u5F53\u524D\u5DF2\u7ECF\u5F55\u97F3\u7684PCM\u97F3\u9891\u6570\u636E\r\n     *\r\n     * @returns[DataView]\r\n     * @memberof Recorder\r\n     */\r\n    // getWholeData() {\r\n    //     return this.tempPCM;\r\n    // }\r\n\r\n    /**\r\n     * \u83B7\u53D6\u4F59\u4E0B\u7684\u65B0\u6570\u636E\uFF0C\u4E0D\u5305\u62EC getNextData \u524D\u4E00\u6B21\u83B7\u53D6\u7684\u6570\u636E\r\n     *\r\n     * @returns [DataView]\r\n     * @memberof Recorder\r\n     */\r\n    // getNextData() {\r\n    //     let length = this.tempPCM.length,\r\n    //         data = this.tempPCM.slice(this.offset);\r\n\r\n    //     this.offset = length;\r\n\r\n    //     return data;\r\n    // }\r\n\r\n    /**\r\n     * \u83B7\u53D6\u5F53\u524D\u5F55\u97F3\u7684\u6CE2\u5F62\u6570\u636E\uFF0C\r\n     * \u8C03\u53D6\u9891\u7387\u7531\u5916\u90E8\u63A7\u5236\u3002\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    getRecordAnalyseData(): any {\r\n        return this.getAnalyseData();\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6\u5F55\u97F3\u64AD\u653E\u65F6\u7684\u6CE2\u5F62\u6570\u636E\uFF0C\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    getPlayAnalyseData(): any {\r\n        // \u73B0\u5728\u5F55\u97F3\u548C\u64AD\u653E\u4E0D\u5141\u8BB8\u540C\u65F6\u8FDB\u884C\uFF0C\u6240\u6709\u590D\u7528\u7684\u5F55\u97F3\u7684analyser\u8282\u70B9\u3002\r\n        return Player.getAnalyseData();\r\n    }\r\n\r\n    getPCM(): any {\r\n        // \u5148\u505C\u6B62\r\n        this.stop();\r\n        // \u83B7\u53D6pcm\u6570\u636E\r\n        let data: any = this.getData();\r\n        // \u6839\u636E\u8F93\u5165\u8F93\u51FA\u6BD4\u4F8B \u538B\u7F29\u6216\u6269\u5C55\r\n        data = compress(data, this.inputSampleRate, this.outputSampleRate);\r\n        // \u6309\u91C7\u6837\u4F4D\u6570\u91CD\u65B0\u7F16\u7801\r\n        return encodePCM(data, this.oututSampleBits, this.littleEdian);\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6PCM\u683C\u5F0F\u7684blob\u6570\u636E\r\n     *\r\n     * @returns { blob }  PCM\u683C\u5F0F\u7684blob\u6570\u636E\r\n     * @memberof Recorder\r\n     */\r\n    getPCMBlob(): any {\r\n        return new Blob([ this.getPCM() ]);\r\n    }\r\n\r\n    /**\r\n     * \u4E0B\u8F7D\u5F55\u97F3pcm\u6570\u636E\r\n     *\r\n     * @param {string} [name='recorder']    \u91CD\u547D\u540D\u7684\u540D\u5B57\r\n     * @memberof Recorder\r\n     */\r\n    downloadPCM(name: string = 'recorder'): void {\r\n        let pcmBlob = this.getPCMBlob();\r\n\r\n        downloadPCM(pcmBlob, name);\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6WAV\u7F16\u7801\u7684\u4E8C\u8FDB\u5236\u6570\u636E(dataview)\r\n     *\r\n     * @returns {dataview}  WAV\u7F16\u7801\u7684\u4E8C\u8FDB\u5236\u6570\u636E\r\n     * @memberof Recorder\r\n     */\r\n    getWAV(): any {\r\n        let pcmTemp = this.getPCM();\r\n\r\n        // PCM\u589E\u52A044\u5B57\u8282\u7684\u5934\u5C31\u662FWAV\u683C\u5F0F\u4E86\r\n        return encodeWAV(pcmTemp, this.inputSampleRate,\r\n            this.outputSampleRate, this.config.numChannels, this.oututSampleBits, this.littleEdian);;\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6WAV\u97F3\u9891\u7684blob\u6570\u636E\r\n     *\r\n     * @returns { blob }    wav\u683C\u5F0Fblob\u6570\u636E\r\n     * @memberof Recorder\r\n     */\r\n    getWAVBlob(): any {\r\n        return new Blob([ this.getWAV() ], { type: 'audio/wav' });\r\n    }\r\n\r\n    /**\r\n     * \u4E0B\u8F7D\u5F55\u97F3\u7684wav\u6570\u636E\r\n     *\r\n     * @param {string} [name='recorder']    \u91CD\u547D\u540D\u7684\u540D\u5B57\r\n     * @memberof Recorder\r\n     */\r\n    downloadWAV(name: string = 'recorder'): void {\r\n        let wavBlob = this.getWAVBlob();\r\n\r\n        downloadWAV(wavBlob, name);\r\n    }\r\n\r\n    /**\r\n     * \u901A\u7528\u7684\u4E0B\u8F7D\u63A5\u53E3\r\n     */\r\n    download(blob, name: string, type: string): void {\r\n        download(blob, name, type);\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6\u5DE6\u548C\u53F3\u58F0\u9053\u7684\u6570\u636E\r\n     *\r\n     * @returns [DataView]\r\n     */\r\n    getChannelData(): any {\r\n        const all = this.getPCM();\r\n        const length = all.byteLength;\r\n        const littleEdian = this.littleEdian\r\n        const res = { left: null, right: null }\r\n\r\n        if (this.config.numChannels === 2) {\r\n            // \u53CC\u901A\u9053,\u5288\u5F00\r\n            const lD = new DataView(new ArrayBuffer(length / 2))\r\n            const rD = new DataView(new ArrayBuffer(length / 2))\r\n            // \u53CC\u58F0\u9053\uFF0C\u9700\u8981\u62C6\u5206\u4E0B\u6570\u636E\r\n\r\n            if (this.config.sampleBits === 16) {\r\n                for (var i = 0; i < length / 2; i += 2) {\r\n                    lD.setInt16(i, all.getInt16(i * 2, littleEdian), littleEdian)\r\n                    rD.setInt16(i, all.getInt16(i * 2 + 2, littleEdian), littleEdian)\r\n                }\r\n            } else {\r\n                for (var i = 0; i < length / 2; i += 2) {\r\n                    lD.setInt8(i, all.getInt8(i * 2))\r\n                    rD.setInt8(i, all.getInt8(i * 2 + 1))\r\n                }\r\n            }\r\n\r\n            res.left = lD\r\n            res.right = rD\r\n        } else {\r\n            // \u5355\u901A\u9053\r\n            res.left = all\r\n        }\r\n\r\n        return res\r\n    }\r\n}\r\n\r\nexport default Index;\r\n", "/**\r\n * \u4E0B\u8F7D\u5F55\u97F3\u6587\u4EF6\r\n * @private\r\n * @param {*} blob      blob\u6570\u636E\r\n * @param {string} name \u4E0B\u8F7D\u7684\u6587\u4EF6\u540D\r\n * @param {string} type \u4E0B\u8F7D\u7684\u6587\u4EF6\u540E\u7F00\r\n */\r\nfunction _download(blob, name: string, type: string): void {\r\n    let oA = document.createElement('a');\r\n\r\n    oA.href = window.URL.createObjectURL(blob);\r\n    oA.download = `${ name }.${ type }`;\r\n    oA.click();\r\n}\r\n\r\n/**\r\n * \u4E0B\u8F7D\u5F55\u97F3\u7684wav\u6570\u636E\r\n *\r\n * @param {blob}   \u9700\u8981\u4E0B\u8F7D\u7684blob\u6570\u636E\u7C7B\u578B\r\n * @param {string} [name='recorder']    \u91CD\u547D\u540D\u7684\u540D\u5B57\r\n */\r\nexport function downloadWAV(wavblob, name: string = 'recorder'): void {\r\n    _download(wavblob, name, 'wav');\r\n}\r\n\r\n/**\r\n * \u4E0B\u8F7D\u5F55\u97F3pcm\u6570\u636E\r\n *\r\n * @param {blob}   \u9700\u8981\u4E0B\u8F7D\u7684blob\u6570\u636E\u7C7B\u578B\r\n * @param {string} [name='recorder']    \u91CD\u547D\u540D\u7684\u540D\u5B57\r\n * @memberof Recorder\r\n */\r\nexport function downloadPCM(pcmBlob, name: string = 'recorder'): void {\r\n    _download(pcmBlob, name, 'pcm');\r\n}\r\n\r\n// \u901A\u7528\u4E0B\u8F7D\u63A5\u53E3\r\nexport function download(blob, name: string, type: string) {\r\n    return _download(blob, name, type)\r\n}\r\n", "import { throwError } from '../exception/exception'\r\n\r\ndeclare let window: any;\r\n\r\nlet source: any = null;\r\nlet playTime: number = 0;       // \u76F8\u5BF9\u65F6\u95F4\uFF0C\u8BB0\u5F55\u6682\u505C\u4F4D\u7F6E\r\nlet playStamp: number = 0;      // \u5F00\u59CB\u6216\u6682\u505C\u540E\u5F00\u59CB\u7684\u65F6\u95F4\u6233(\u7EDD\u5BF9)\r\nlet context: any = null;\r\nlet analyser: any = null;\r\n\r\nlet audioData: any = null;\r\n// let hasInit: boolean = false;           // \u662F\u5426\u5DF2\u7ECF\u521D\u59CB\u5316\u4E86\r\nlet isPaused: boolean = false;\r\nlet totalTime: number = 0;\r\nlet endplayFn: any = function() {};\r\n\r\n/**\r\n * \u521D\u59CB\u5316\r\n */\r\nfunction init(): void {\r\n    context = new (window.AudioContext || window.webkitAudioContext)();\r\n    analyser = context.createAnalyser();\r\n    analyser.fftSize = 2048;                   // \u8868\u793A\u5B58\u50A8\u9891\u57DF\u7684\u5927\u5C0F\r\n}\r\n\r\n/**\r\n * play\r\n * @returns {Promise<{}>}\r\n */\r\nfunction playAudio(): Promise<{}> {\r\n    isPaused = false;\r\n\r\n    return context.decodeAudioData(audioData.slice(0), buffer => {\r\n        source = context.createBufferSource();\r\n\r\n        // \u64AD\u653E\u7ED3\u675F\u7684\u4E8B\u4EF6\u7ED1\u5B9A\r\n        source.onended = () => {\r\n            if (!isPaused) {  // \u6682\u505C\u7684\u65F6\u5019\u4E5F\u4F1A\u89E6\u53D1\u8BE5\u4E8B\u4EF6\r\n                // \u8BA1\u7B97\u97F3\u9891\u603B\u65F6\u957F\r\n                totalTime = context.currentTime - playStamp + playTime;\r\n                endplayFn();\r\n            }\r\n\r\n        }\r\n\r\n        // \u8BBE\u7F6E\u6570\u636E\r\n        source.buffer = buffer;\r\n        // connect\u5230\u5206\u6790\u5668\uFF0C\u8FD8\u662F\u7528\u5F55\u97F3\u7684\uFF0C\u56E0\u4E3A\u64AD\u653E\u65F6\u4E0D\u80FD\u5F55\u97F3\u7684\r\n        source.connect(analyser);\r\n        analyser.connect(context.destination);\r\n        source.start(0, playTime);\r\n\r\n        // \u8BB0\u5F55\u5F53\u524D\u7684\u65F6\u95F4\u6233\uFF0C\u4EE5\u5907\u6682\u505C\u65F6\u4F7F\u7528\r\n        playStamp = context.currentTime;\r\n    }, function(e) {\r\n        throwError(e);\r\n    });\r\n}\r\n\r\n// \u9500\u6BC1source, \u7531\u4E8E decodeAudioData \u4EA7\u751F\u7684source\u6BCF\u6B21\u505C\u6B62\u540E\u5C31\u4E0D\u80FD\u4F7F\u7528\uFF0C\u6240\u4EE5\u6682\u505C\u4E5F\u610F\u5473\u7740\u9500\u6BC1\uFF0C\u4E0B\u6B21\u9700\u91CD\u65B0\u542F\u52A8\u3002\r\nfunction destroySource() {\r\n    if (source) {\r\n        source.stop();\r\n        source = null;\r\n    }\r\n}\r\n\r\nexport default class Player {\r\n    /**\r\n     * play record\r\n     * @static\r\n     * @param {ArrayBuffer} arraybuffer\r\n     * @memberof Player\r\n     */\r\n    static play(arraybuffer): Promise<{}> {\r\n        if (!context) {\r\n            // \u7B2C\u4E00\u6B21\u64AD\u653E\u8981\u521D\u59CB\u5316\r\n            init();\r\n        }\r\n        this.stopPlay();\r\n        // \u7F13\u5B58\u64AD\u653E\u6570\u636E\r\n        audioData = arraybuffer;\r\n        totalTime = 0;\r\n\r\n        return playAudio();\r\n    }\r\n\r\n    /**\r\n     * \u6682\u505C\u64AD\u653E\u5F55\u97F3\r\n     * @memberof Player\r\n     */\r\n    static pausePlay(): void {\r\n        destroySource();\r\n        // \u591A\u6B21\u6682\u505C\u9700\u8981\u7D2F\u52A0\r\n        playTime += context.currentTime - playStamp;\r\n        isPaused = true;\r\n    }\r\n\r\n    /**\r\n     * \u6062\u590D\u64AD\u653E\u5F55\u97F3\r\n     * @memberof Player\r\n     */\r\n    static resumePlay(): Promise<{}> {\r\n        return playAudio();\r\n    }\r\n\r\n    /**\r\n     * \u505C\u6B62\u64AD\u653E\r\n     * @memberof Player\r\n     */\r\n    static stopPlay() {\r\n        playTime = 0;\r\n        audioData = null;\r\n\r\n        destroySource();\r\n    }\r\n\r\n    static destroyPlay() {\r\n        this.stopPlay();\r\n    }\r\n\r\n    static getAnalyseData() {\r\n        let dataArray = new Uint8Array(analyser.frequencyBinCount);\r\n        // \u5C06\u6570\u636E\u62F7\u8D1D\u5230dataArray\u4E2D\u3002\r\n        analyser.getByteTimeDomainData(dataArray);\r\n\r\n        return dataArray;\r\n    }\r\n\r\n    /**\r\n     * \u589E\u52A0\u5F55\u97F3\u64AD\u653E\u5B8C\u6210\u7684\u4E8B\u4EF6\u7ED1\u5B9A\r\n     *\r\n     * @static\r\n     * @param {*} [fn=function() {}]\r\n     * @memberof Player\r\n     */\r\n    static addPlayEnd(fn: any = function() {}) {\r\n        endplayFn = fn;\r\n    }\r\n\r\n    // \u83B7\u53D6\u5DF2\u7ECF\u64AD\u653E\u7684\u65F6\u957F\r\n    static getPlayTime(): number {\r\n        let pTime = isPaused ? playTime : context.currentTime - playStamp + playTime;\r\n\r\n        return totalTime || pTime;\r\n    }\r\n}\r\n", "/**\r\n * \u5F02\u5E38\u5904\u7406\r\n * @static\r\n * @param {*} message   \u9519\u8BEF\u6D88\u606F\r\n */\r\nexport function throwError(message: string) {\r\n    throw new Error(message);\r\n}\r\n", "import { compress, encodePCM, encodeWAV } from '../transform/transform';\r\n\r\ndeclare let window: any;\r\ndeclare let Math: any;\r\ndeclare let navigator: any;\r\ndeclare let Promise: any;\r\n\r\n// \u6784\u9020\u51FD\u6570\u53C2\u6570\u683C\u5F0F\r\ninterface recorderConfig {\r\n    sampleBits?: number,        // \u91C7\u6837\u4F4D\u6570\r\n    sampleRate?: number,        // \u91C7\u6837\u7387\r\n    numChannels?: number,       // \u58F0\u9053\u6570\r\n    compiling?: boolean,        // \u662F\u5426\u8FB9\u5F55\u8FB9\u64AD\r\n}\r\n\r\nexport default class Recorder {\r\n    private context: any;\r\n    protected config: recorderConfig;               // \u914D\u7F6E\r\n    private analyser: any;\r\n    private size: number = 0;                       // \u5F55\u97F3\u6587\u4EF6\u603B\u957F\u5EA6\r\n    private lBuffer: Array<Float32Array> = [];      // pcm\u97F3\u9891\u6570\u636E\u641C\u96C6\u5668(\u5DE6\u58F0\u9053)\r\n    private rBuffer: Array<Float32Array> = [];      // pcm\u97F3\u9891\u6570\u636E\u641C\u96C6\u5668(\u53F3\u58F0\u9053)\r\n    private PCM: any;                               // \u6700\u7EC8\u7684PCM\u6570\u636E\u7F13\u5B58\uFF0C\u907F\u514D\u591A\u6B21encode\r\n    private tempPCM: Array<DataView> = [];          // \u8FB9\u5F55\u8FB9\u8F6C\u65F6\u4E34\u65F6\u5B58\u653Epcm\u7684\r\n    private audioInput: any;\r\n    protected inputSampleRate: number;              // \u8F93\u5165\u91C7\u6837\u7387\r\n    protected inputSampleBits: number = 16;         // \u8F93\u5165\u91C7\u6837\u4F4D\u6570\r\n    protected outputSampleRate: number;             // \u8F93\u51FA\u91C7\u6837\u7387\r\n    protected oututSampleBits: number;              // \u8F93\u51FA\u91C7\u6837\u4F4D\u6570\r\n    private source: any;                            // \u97F3\u9891\u8F93\u5165\r\n    private recorder: any;\r\n    private stream: any;                            // \u6D41\r\n    protected littleEdian: boolean;                 // \u662F\u5426\u662F\u5C0F\u7AEF\u5B57\u8282\u5E8F\r\n    protected fileSize: number = 0;                 // \u5F55\u97F3\u5927\u5C0F\uFF0Cbyte\u4E3A\u5355\u4F4D\r\n    protected duration: number = 0;                 // \u5F55\u97F3\u65F6\u957F\r\n    private needRecord: boolean = true;             // \u7531\u4E8Esafari\u95EE\u9898\uFF0C\u5BFC\u81F4\u4F7F\u7528\u8BE5\u65B9\u6848\u4EE3\u66FFdisconnect/connect\u65B9\u6848\r\n    // \u6B63\u5728\u5F55\u97F3\u65F6\u95F4\uFF0C\u53C2\u6570\u662F\u5DF2\u7ECF\u5F55\u4E86\u591A\u5C11\u65F6\u95F4\u4E86\r\n    public onprocess: (duration: number) => void;\r\n    // onprocess \u66FF\u4EE3\u51FD\u6570\uFF0C\u4FDD\u6301\u539F\u6765\u7684 onprocess \u5411\u4E0B\u517C\u5BB9\r\n    public onprogress: (payload: {\r\n        duration: number,\r\n        fileSize: number,\r\n        vol: number,\r\n        // data: Array<DataView>,      // \u5F53\u524D\u5B58\u50A8\u7684\u6240\u6709\u5F55\u97F3\u6570\u636E\r\n    }) => void;\r\n    public onplay: () => void;                  // \u97F3\u9891\u64AD\u653E\u56DE\u8C03\r\n    public onpauseplay: () => void;             // \u97F3\u9891\u6682\u505C\u56DE\u8C03\r\n    public onresumeplay: () => void;            // \u97F3\u9891\u6062\u590D\u64AD\u653E\u56DE\u8C03\r\n    public onstopplay: () => void;              // \u97F3\u9891\u505C\u6B62\u64AD\u653E\u56DE\u8C03\r\n    public onplayend: () => void;               // \u97F3\u9891\u6B63\u5E38\u64AD\u653E\u7ED3\u675F\r\n\r\n    /**\r\n     * @param {Object} options \u5305\u542B\u4EE5\u4E0B\u4E09\u4E2A\u53C2\u6570\uFF1A\r\n     * sampleBits\uFF0C\u91C7\u6837\u4F4D\u6570\uFF0C\u4E00\u822C8,16\uFF0C\u9ED8\u8BA416\r\n     * sampleRate\uFF0C\u91C7\u6837\u7387\uFF0C\u4E00\u822C 11025\u300116000\u300122050\u300124000\u300144100\u300148000\uFF0C\u9ED8\u8BA4\u4E3A\u6D4F\u89C8\u5668\u81EA\u5E26\u7684\u91C7\u6837\u7387\r\n     * numChannels\uFF0C\u58F0\u9053\uFF0C1\u62162\r\n     */\r\n    constructor(options: recorderConfig = {}) {\r\n        // \u4E34\u65F6audioContext\uFF0C\u4E3A\u4E86\u83B7\u53D6\u8F93\u5165\u91C7\u6837\u7387\u7684\r\n        let context = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\n        this.inputSampleRate = context.sampleRate;     // \u83B7\u53D6\u5F53\u524D\u8F93\u5165\u7684\u91C7\u6837\u7387\r\n\r\n        // \u8BBE\u7F6E\u8F93\u51FA\u914D\u7F6E\r\n        this.setNewOption(options);\r\n\r\n        // \u5224\u65AD\u7AEF\u5B57\u8282\u5E8F\r\n        this.littleEdian = (function() {\r\n            let buffer = new ArrayBuffer(2);\r\n            new DataView(buffer).setInt16(0, 256, true);\r\n            return new Int16Array(buffer)[0] === 256;\r\n        })();\r\n        // \u517C\u5BB9 getUserMedia\r\n        Recorder.initUserMedia();\r\n    }\r\n\r\n    protected setNewOption(options: recorderConfig = {}) {\r\n        this.config = {\r\n            // \u91C7\u6837\u6570\u4F4D 8, 16\r\n            sampleBits: ~[8, 16].indexOf(options.sampleBits) ? options.sampleBits : 16,\r\n            // \u91C7\u6837\u7387\r\n            sampleRate: ~[8000, 11025, 16000, 22050, 24000, 44100, 48000].indexOf(options.sampleRate) ? options.sampleRate : this.inputSampleRate,\r\n            // \u58F0\u9053\u6570\uFF0C1\u62162\r\n            numChannels: ~[1, 2].indexOf(options.numChannels) ? options.numChannels : 1,\r\n            // \u662F\u5426\u9700\u8981\u8FB9\u5F55\u8FB9\u8F6C\uFF0C\u9ED8\u8BA4\u5173\u95ED\uFF0C\u540E\u671F\u4F7F\u7528web worker\r\n            // compiling: !!options.compiling || false,   // \u5148\u79FB\u9664\r\n        };\r\n        // \u8BBE\u7F6E\u91C7\u6837\u7684\u53C2\u6570\r\n        this.outputSampleRate = this.config.sampleRate;     // \u8F93\u51FA\u91C7\u6837\u7387\r\n        this.oututSampleBits = this.config.sampleBits;      // \u8F93\u51FA\u91C7\u6837\u6570\u4F4D 8, 16\r\n    }\r\n\r\n    /**\r\n     * \u5F00\u59CB\u5F55\u97F3\r\n     *\r\n     * @returns {Promise<{}>}\r\n     * @memberof Recorder\r\n     */\r\n    startRecord(): Promise<{}> {\r\n        if (this.context) {\r\n            // \u5173\u95ED\u5148\u524D\u7684\u5F55\u97F3\u5B9E\u4F8B\uFF0C\u56E0\u4E3A\u524D\u6B21\u7684\u5B9E\u4F8B\u4F1A\u7F13\u5B58\u5C11\u91CF\u524D\u6B21\u7684\u5F55\u97F3\u6570\u636E\r\n            this.destroyRecord();\r\n        }\r\n        // \u521D\u59CB\u5316\r\n        this.initRecorder();\r\n\r\n        return navigator.mediaDevices.getUserMedia({\r\n            audio: true\r\n        }).then(stream => {\r\n            // audioInput\u8868\u793A\u97F3\u9891\u6E90\u8282\u70B9\r\n            // stream\u662F\u901A\u8FC7navigator.getUserMedia\u83B7\u53D6\u7684\u5916\u90E8\uFF08\u5982\u9EA6\u514B\u98CE\uFF09stream\u97F3\u9891\u8F93\u51FA\uFF0C\u5BF9\u4E8E\u8FD9\u5C31\u662F\u8F93\u5165\r\n            this.audioInput = this.context.createMediaStreamSource(stream);\r\n            this.stream = stream;\r\n        }/* \u62A5\u9519\u4E22\u7ED9\u5916\u90E8\u4F7F\u7528\u8005catch\uFF0C\u540E\u671F\u53EF\u5728\u6B64\u5904\u589E\u52A0\u5EFA\u8BAE\u6027\u63D0\u793A\r\n            , error => {\r\n            // \u629B\u51FA\u5F02\u5E38\r\n            Recorder.throwError(error.name + \" : \" + error.message);\r\n        } */).then(() => {\r\n            // audioInput \u4E3A\u58F0\u97F3\u6E90\uFF0C\u8FDE\u63A5\u5230\u5904\u7406\u8282\u70B9 recorder\r\n            this.audioInput.connect(this.analyser);\r\n            this.analyser.connect(this.recorder);\r\n            // this.audioInput.connect(this.recorder);\r\n            // \u5904\u7406\u8282\u70B9 recorder \u8FDE\u63A5\u5230\u626C\u58F0\u5668\r\n            this.recorder.connect(this.context.destination);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \u6682\u505C\u5F55\u97F3\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    pauseRecord(): void {\r\n        this.needRecord = false;\r\n    }\r\n\r\n    /**\r\n     * \u7EE7\u7EED\u5F55\u97F3\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    resumeRecord(): void {\r\n        this.needRecord = true;\r\n    }\r\n\r\n    /**\r\n     * \u505C\u6B62\u5F55\u97F3\r\n     *\r\n     */\r\n    stopRecord(): void {\r\n        this.audioInput && this.audioInput.disconnect();\r\n        this.source && this.source.stop();\r\n        this.recorder.disconnect();\r\n        this.analyser.disconnect();\r\n        this.needRecord = true;\r\n    }\r\n\r\n    /**\r\n     * \u9500\u6BC1\u5F55\u97F3\u5BF9\u8C61\r\n     *\r\n     */\r\n    destroyRecord(): Promise<{}> {\r\n        this.clearRecordStatus();\r\n        // \u7ED3\u675F\u6D41\r\n        this.stopStream();\r\n\r\n        return this.closeAudioContext();\r\n    }\r\n\r\n    getAnalyseData() {\r\n        let dataArray = new Uint8Array(this.analyser.frequencyBinCount);\r\n        // \u5C06\u6570\u636E\u62F7\u8D1D\u5230dataArray\u4E2D\u3002\r\n        this.analyser.getByteTimeDomainData(dataArray);\r\n\r\n        return dataArray;\r\n    }\r\n\r\n    // \u83B7\u53D6\u5F55\u97F3\u6570\u636E\r\n    getData() {\r\n        let data: any = this.flat();\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * \u6E05\u9664\u72B6\u6001\r\n     *\r\n     */\r\n    private clearRecordStatus() {\r\n        this.lBuffer.length = 0;\r\n        this.rBuffer.length = 0;\r\n        this.size = 0;\r\n        this.fileSize = 0;\r\n        this.PCM = null;\r\n        this.audioInput = null;\r\n        this.duration = 0;\r\n    }\r\n\r\n    /**\r\n     * \u5C06\u4E8C\u7EF4\u6570\u7EC4\u8F6C\u4E00\u7EF4\r\n     *\r\n     * @private\r\n     * @returns  {float32array}     \u97F3\u9891pcm\u4E8C\u8FDB\u5236\u6570\u636E\r\n     * @memberof Recorder\r\n     */\r\n    private flat() {\r\n        let lData = null,\r\n            rData = new Float32Array(0);    // \u53F3\u58F0\u9053\u9ED8\u8BA4\u4E3A0\r\n\r\n        // \u521B\u5EFA\u5B58\u653E\u6570\u636E\u7684\u5BB9\u5668\r\n        if (1 === this.config.numChannels) {\r\n            lData = new Float32Array(this.size);\r\n        } else {\r\n            lData = new Float32Array(this.size / 2);\r\n            rData = new Float32Array(this.size / 2);\r\n        }\r\n        // \u5408\u5E76\r\n        let offset = 0; // \u504F\u79FB\u91CF\u8BA1\u7B97\r\n\r\n        // \u5C06\u4E8C\u7EF4\u6570\u636E\uFF0C\u8F6C\u6210\u4E00\u7EF4\u6570\u636E\r\n        // \u5DE6\u58F0\u9053\r\n        for (let i = 0; i < this.lBuffer.length; i++) {\r\n            lData.set(this.lBuffer[i], offset);\r\n            offset += this.lBuffer[i].length;\r\n        }\r\n\r\n        offset = 0;\r\n        // \u53F3\u58F0\u9053\r\n        for (let i = 0; i < this.rBuffer.length; i++) {\r\n            rData.set(this.rBuffer[i], offset);\r\n            offset += this.rBuffer[i].length;\r\n        }\r\n\r\n        return {\r\n            left: lData,\r\n            right: rData\r\n        };\r\n    }\r\n\r\n    /**\r\n     * \u521D\u59CB\u5316\u5F55\u97F3\u5B9E\u4F8B\r\n     */\r\n    private initRecorder(): void {\r\n        // \u6E05\u7A7A\u6570\u636E\r\n        this.clearRecordStatus();\r\n\r\n        this.context = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\n        this.analyser = this.context.createAnalyser();  // \u5F55\u97F3\u5206\u6790\u8282\u70B9\r\n        this.analyser.fftSize = 2048;                   // \u8868\u793A\u5B58\u50A8\u9891\u57DF\u7684\u5927\u5C0F\r\n\r\n        // \u7B2C\u4E00\u4E2A\u53C2\u6570\u8868\u793A\u6536\u96C6\u91C7\u6837\u7684\u5927\u5C0F\uFF0C\u91C7\u96C6\u5B8C\u8FD9\u4E48\u591A\u540E\u4F1A\u89E6\u53D1 onaudioprocess \u63A5\u53E3\u4E00\u6B21\uFF0C\u8BE5\u503C\u4E00\u822C\u4E3A1024,2048,4096\u7B49\uFF0C\u4E00\u822C\u5C31\u8BBE\u7F6E\u4E3A4096\r\n        // \u7B2C\u4E8C\uFF0C\u4E09\u4E2A\u53C2\u6570\u5206\u522B\u662F\u8F93\u5165\u7684\u58F0\u9053\u6570\u548C\u8F93\u51FA\u7684\u58F0\u9053\u6570\uFF0C\u4FDD\u6301\u4E00\u81F4\u5373\u53EF\u3002\r\n        let createScript = this.context.createScriptProcessor || this.context.createJavaScriptNode;\r\n        this.recorder = createScript.apply(this.context, [4096, this.config.numChannels, this.config.numChannels]);\r\n\r\n        // \u97F3\u9891\u91C7\u96C6\r\n        this.recorder.onaudioprocess = e => {\r\n            if (!this.needRecord) {\r\n                return;\r\n            }\r\n            // \u5DE6\u58F0\u9053\u6570\u636E\r\n            // getChannelData\u8FD4\u56DEFloat32Array\u7C7B\u578B\u7684pcm\u6570\u636E\r\n            let lData = e.inputBuffer.getChannelData(0),\r\n                rData = null,\r\n                vol = 0;        // \u97F3\u91CF\u767E\u5206\u6BD4\r\n\r\n            this.lBuffer.push(new Float32Array(lData));\r\n\r\n            this.size += lData.length;\r\n\r\n            // \u5224\u65AD\u662F\u5426\u6709\u53F3\u58F0\u9053\u6570\u636E\r\n            if (2 === this.config.numChannels) {\r\n                rData = e.inputBuffer.getChannelData(1);\r\n                this.rBuffer.push(new Float32Array(rData));\r\n\r\n                this.size += rData.length;\r\n            }\r\n\r\n            // \u8FB9\u5F55\u8FB9\u8F6C\u5904\u7406 \u6682\u65F6\u4E0D\u652F\u6301\r\n            // if (this.config.compiling) {\r\n            //     let pcm = this.transformIntoPCM(lData, rData);\r\n\r\n            //     this.tempPCM.push(pcm);\r\n            //     // \u8BA1\u7B97\u5F55\u97F3\u5927\u5C0F\r\n            //     this.fileSize = pcm.byteLength * this.tempPCM.length;\r\n            // } else {\r\n                // \u8BA1\u7B97\u5F55\u97F3\u5927\u5C0F\r\n                this.fileSize = Math.floor(this.size / Math.max( this.inputSampleRate / this.outputSampleRate, 1))\r\n                    * (this.oututSampleBits / 8)\r\n            // }\r\n            // \u4E3A\u4F55\u6B64\u5904\u8BA1\u7B97\u5927\u5C0F\u9700\u8981\u5206\u5F00\u8BA1\u7B97\u3002\u539F\u56E0\u662F\u5148\u5F55\u540E\u8F6C\u65F6\uFF0C\u662F\u5C06\u6240\u6709\u6570\u636E\u4E00\u8D77\u5904\u7406\uFF0C\u8FB9\u5F55\u8FB9\u8F6C\u662F\u5355\u4E2A 4096 \u5904\u7406\uFF0C\r\n            // \u6709\u5C0F\u6570\u4F4D\u7684\u504F\u5DEE\u3002\r\n\r\n            // \u8BA1\u7B97\u97F3\u91CF\u767E\u5206\u6BD4\r\n            vol = Math.max.apply(Math, lData) * 100;\r\n            // \u7EDF\u8BA1\u5F55\u97F3\u65F6\u957F\r\n            this.duration += 4096 / this.inputSampleRate;\r\n            // \u5F55\u97F3\u65F6\u957F\u56DE\u8C03\r\n            this.onprocess && this.onprocess(this.duration);\r\n            // \u5F55\u97F3\u65F6\u957F\u53CA\u54CD\u5EA6\u56DE\u8C03\r\n            this.onprogress && this.onprogress({\r\n                duration: this.duration,\r\n                fileSize: this.fileSize,\r\n                vol,\r\n                // data: this.tempPCM,     // \u5F53\u524D\u6240\u6709\u7684pcm\u6570\u636E\uFF0C\u8C03\u7528\u8005\u63A7\u5236\u589E\u91CF\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u7EC8\u6B62\u6D41\uFF08\u8FD9\u53EF\u4EE5\u8BA9\u6D4F\u89C8\u5668\u4E0A\u6B63\u5728\u5F55\u97F3\u7684\u6807\u5FD7\u6D88\u5931\u6389\uFF09\r\n     * @private\r\n     * @memberof Recorder\r\n     */\r\n    private stopStream() {\r\n        if (this.stream && this.stream.getTracks) {\r\n            this.stream.getTracks().forEach(track => track.stop());\r\n            this.stream = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * close\u517C\u5BB9\u65B9\u6848\r\n     * \u5982firefox 30 \u7B49\u4F4E\u7248\u672C\u6D4F\u89C8\u5668\u6CA1\u6709 close\u65B9\u6CD5\r\n     */\r\n    private closeAudioContext() {\r\n        if (this.context && this.context.close && this.context.state !== 'closed') {\r\n            return this.context.close();\r\n        } else {\r\n            return new Promise((resolve) => {\r\n                resolve();\r\n            });\r\n        }\r\n    }\r\n\r\n    // getUserMedia \u7248\u672C\u517C\u5BB9\r\n    static initUserMedia() {\r\n        if (navigator.mediaDevices === undefined) {\r\n            navigator.mediaDevices = {};\r\n        }\r\n\r\n        if (navigator.mediaDevices.getUserMedia === undefined) {\r\n            navigator.mediaDevices.getUserMedia = function(constraints) {\r\n                let getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n\r\n                if (!getUserMedia) {\r\n                    return Promise.reject(new Error('\u6D4F\u89C8\u5668\u4E0D\u652F\u6301 getUserMedia !'));\r\n                }\r\n\r\n                return new Promise(function(resolve, reject) {\r\n                    getUserMedia.call(navigator, constraints, resolve, reject);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u5C06\u83B7\u53D6\u5230\u5230\u5DE6\u53F3\u58F0\u9053\u7684Float32Array\u6570\u636E\u7F16\u7801\u8F6C\u5316\r\n     *\r\n     * @param {Float32Array} lData  \u5DE6\u58F0\u9053\u6570\u636E\r\n     * @param {Float32Array} rData  \u6709\u58F0\u9053\u6570\u636E\r\n     * @returns DataView\r\n     */\r\n    private transformIntoPCM(lData, rData) {\r\n        let lBuffer = new Float32Array(lData),\r\n            rBuffer = new Float32Array(rData);\r\n\r\n        let data = compress({\r\n            left: lBuffer,\r\n            right: rBuffer,\r\n        }, this.inputSampleRate, this.outputSampleRate);\r\n\r\n        return encodePCM(data, this.oututSampleBits, this.littleEdian);\r\n    }\r\n\r\n    static getPermission(): Promise<{}> {\r\n        this.initUserMedia();\r\n\r\n        return navigator.mediaDevices.getUserMedia({audio: true}).then((stream) => {\r\n            stream && stream.getTracks().forEach(track => track.stop());\r\n        });\r\n    }\r\n}\r\n", "module.exports = require(\"./dist/recorder.js\");\r\n", "export default require(\"./node_modules/js-audio-recorder/index.js\");"],
  "mappings": "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",
  "names": []
}

import type { FlexProps } from './interface';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {
            vertical?: boolean;
            flex?: import("csstype").Property.Flex<string | number>;
            wrap?: import("csstype").Property.FlexWrap;
            justify?: import("csstype").Property.JustifyContent;
            gap?: string | number | (string & {});
            align?: import("csstype").Property.AlignItems;
            prefixCls?: string;
            component?: any;
            style?: unknown;
            ref?: import("vue").VNodeRef;
            key?: string | number | symbol;
            ref_for?: boolean;
            ref_key?: string;
            onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[];
            onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[];
            onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[];
            onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[];
            onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[];
            onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[];
            class?: unknown;
            tabindex?: string | number;
            role?: string;
        };
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot<any>;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            prefixCls: {
                type: import("vue").PropType<string>;
                default: string;
            };
            vertical: {
                type: BooleanConstructor;
                default: boolean;
            };
            wrap: {
                type: import("vue").PropType<import("csstype").Property.FlexWrap>;
                default: import("csstype").Property.FlexWrap;
            };
            justify: {
                type: import("vue").PropType<import("csstype").Property.JustifyContent>;
                default: import("csstype").Property.JustifyContent;
            };
            align: {
                type: import("vue").PropType<import("csstype").Property.AlignItems>;
                default: import("csstype").Property.AlignItems;
            };
            flex: {
                type: import("vue").PropType<import("csstype").Property.Flex<string | number>>;
                default: import("csstype").Property.Flex<string | number>;
            };
            gap: {
                type: import("vue").PropType<string | number | (string & {})>;
                default: string | number | (string & {});
            };
            component: {
                default: any;
                type: import("vue").PropType<any>;
            };
        }>>, () => import("../_util/type").VueNode, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            vertical: boolean;
            flex: import("csstype").Property.Flex<string | number>;
            wrap: import("csstype").Property.FlexWrap;
            justify: import("csstype").Property.JustifyContent;
            gap: string | number | (string & {});
            align: import("csstype").Property.AlignItems;
            prefixCls: string;
            component: any;
        }, {}, string, {}> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        prefixCls: {
            type: import("vue").PropType<string>;
            default: string;
        };
        vertical: {
            type: BooleanConstructor;
            default: boolean;
        };
        wrap: {
            type: import("vue").PropType<import("csstype").Property.FlexWrap>;
            default: import("csstype").Property.FlexWrap;
        };
        justify: {
            type: import("vue").PropType<import("csstype").Property.JustifyContent>;
            default: import("csstype").Property.JustifyContent;
        };
        align: {
            type: import("vue").PropType<import("csstype").Property.AlignItems>;
            default: import("csstype").Property.AlignItems;
        };
        flex: {
            type: import("vue").PropType<import("csstype").Property.Flex<string | number>>;
            default: import("csstype").Property.Flex<string | number>;
        };
        gap: {
            type: import("vue").PropType<string | number | (string & {})>;
            default: string | number | (string & {});
        };
        component: {
            default: any;
            type: import("vue").PropType<any>;
        };
    }>> & import("vue").ShallowUnwrapRef<() => import("../_util/type").VueNode> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    prefixCls: {
        type: import("vue").PropType<string>;
        default: string;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrap: {
        type: import("vue").PropType<import("csstype").Property.FlexWrap>;
        default: import("csstype").Property.FlexWrap;
    };
    justify: {
        type: import("vue").PropType<import("csstype").Property.JustifyContent>;
        default: import("csstype").Property.JustifyContent;
    };
    align: {
        type: import("vue").PropType<import("csstype").Property.AlignItems>;
        default: import("csstype").Property.AlignItems;
    };
    flex: {
        type: import("vue").PropType<import("csstype").Property.Flex<string | number>>;
        default: import("csstype").Property.Flex<string | number>;
    };
    gap: {
        type: import("vue").PropType<string | number | (string & {})>;
        default: string | number | (string & {});
    };
    component: {
        default: any;
        type: import("vue").PropType<any>;
    };
}>>, () => import("../_util/type").VueNode, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    vertical: boolean;
    flex: import("csstype").Property.Flex<string | number>;
    wrap: import("csstype").Property.FlexWrap;
    justify: import("csstype").Property.JustifyContent;
    gap: string | number | (string & {});
    align: import("csstype").Property.AlignItems;
    prefixCls: string;
    component: any;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default _default;
export type { FlexProps };
